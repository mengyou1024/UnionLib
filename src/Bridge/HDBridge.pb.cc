// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HDBridge.proto

#include "HDBridge.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Proto {
namespace Union {
namespace HDBridge {
PROTOBUF_CONSTEXPR Gate::Gate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GateDefaultTypeInternal() {}
  union {
    Gate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GateDefaultTypeInternal _Gate_default_instance_;
PROTOBUF_CONSTEXPR ChannelParameter::ChannelParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gates_)*/{}
  , /*decltype(_impl_.sound_velocity_)*/0
  , /*decltype(_impl_.zero_bias_)*/0
  , /*decltype(_impl_.pulse_width_)*/0
  , /*decltype(_impl_.sampling_delay_)*/0
  , /*decltype(_impl_.sampling_depth_)*/0
  , /*decltype(_impl_.gain_)*/0
  , /*decltype(_impl_.sampling_factor_)*/0
  , /*decltype(_impl_.filter_band_)*/0
  , /*decltype(_impl_.demodu_mode_)*/0
  , /*decltype(_impl_.phase_reverse_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelParameterDefaultTypeInternal() {}
  union {
    ChannelParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelParameterDefaultTypeInternal _ChannelParameter_default_instance_;
PROTOBUF_CONSTEXPR OneChannelScanData::OneChannelScanData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gates_)*/{}
  , /*decltype(_impl_.ascan_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pakcage_index_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.axis_offset_)*/0
  , /*decltype(_impl_.axis_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OneChannelScanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneChannelScanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneChannelScanDataDefaultTypeInternal() {}
  union {
    OneChannelScanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneChannelScanDataDefaultTypeInternal _OneChannelScanData_default_instance_;
PROTOBUF_CONSTEXPR ConfigData::ConfigData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_parameters_)*/{}
  , /*decltype(_impl_.repeat_freqency_)*/0
  , /*decltype(_impl_.emit_voltage_)*/0
  , /*decltype(_impl_.channel_flag_)*/0u
  , /*decltype(_impl_.damper_flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDataDefaultTypeInternal() {}
  union {
    ConfigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDataDefaultTypeInternal _ConfigData_default_instance_;
PROTOBUF_CONSTEXPR ScanData::ScanData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScanDataDefaultTypeInternal() {}
  union {
    ScanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScanDataDefaultTypeInternal _ScanData_default_instance_;
PROTOBUF_CONSTEXPR ScanDataVector::ScanDataVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scan_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScanDataVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScanDataVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScanDataVectorDefaultTypeInternal() {}
  union {
    ScanDataVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScanDataVectorDefaultTypeInternal _ScanDataVector_default_instance_;
}  // namespace HDBridge
}  // namespace Union
}  // namespace Proto
static ::_pb::Metadata file_level_metadata_HDBridge_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_HDBridge_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_HDBridge_2eproto = nullptr;

const uint32_t TableStruct_HDBridge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::Gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::Gate, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::Gate, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::Gate, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::Gate, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.sound_velocity_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.zero_bias_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.pulse_width_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.sampling_delay_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.sampling_depth_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.sampling_factor_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.gain_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.filter_band_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.demodu_mode_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.phase_reverse_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ChannelParameter, _impl_.gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.pakcage_index_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.axis_offset_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.axis_length_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.ascan_data_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::OneChannelScanData, _impl_.gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _impl_.repeat_freqency_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _impl_.emit_voltage_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _impl_.channel_flag_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _impl_.damper_flag_),
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ConfigData, _impl_.channel_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ScanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ScanData, _impl_.channel_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ScanDataVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Proto::Union::HDBridge::ScanDataVector, _impl_.scan_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Proto::Union::HDBridge::Gate)},
  { 10, -1, -1, sizeof(::Proto::Union::HDBridge::ChannelParameter)},
  { 27, -1, -1, sizeof(::Proto::Union::HDBridge::OneChannelScanData)},
  { 39, -1, -1, sizeof(::Proto::Union::HDBridge::ConfigData)},
  { 50, -1, -1, sizeof(::Proto::Union::HDBridge::ScanData)},
  { 57, -1, -1, sizeof(::Proto::Union::HDBridge::ScanDataVector)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Proto::Union::HDBridge::_Gate_default_instance_._instance,
  &::Proto::Union::HDBridge::_ChannelParameter_default_instance_._instance,
  &::Proto::Union::HDBridge::_OneChannelScanData_default_instance_._instance,
  &::Proto::Union::HDBridge::_ConfigData_default_instance_._instance,
  &::Proto::Union::HDBridge::_ScanData_default_instance_._instance,
  &::Proto::Union::HDBridge::_ScanDataVector_default_instance_._instance,
};

const char descriptor_table_protodef_HDBridge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016HDBridge.proto\022\024Proto.Union.HDBridge\"A"
  "\n\004Gate\022\013\n\003pos\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\022\016\n\006he"
  "ight\030\003 \001(\001\022\r\n\005index\030\004 \001(\r\"\225\002\n\020ChannelPar"
  "ameter\022\026\n\016sound_velocity\030\001 \001(\001\022\021\n\tzero_b"
  "ias\030\002 \001(\001\022\023\n\013pulse_width\030\003 \001(\001\022\026\n\016sampli"
  "ng_delay\030\004 \001(\001\022\026\n\016sampling_depth\030\005 \001(\001\022\027"
  "\n\017sampling_factor\030\006 \001(\005\022\014\n\004gain\030\007 \001(\001\022\023\n"
  "\013filter_band\030\010 \001(\005\022\023\n\013demodu_mode\030\t \001(\005\022"
  "\025\n\rphase_reverse\030\n \001(\010\022)\n\005gates\030\013 \003(\0132\032."
  "Proto.Union.HDBridge.Gate\"\245\001\n\022OneChannel"
  "ScanData\022\025\n\rpakcage_index\030\001 \001(\005\022\017\n\007chann"
  "el\030\002 \001(\005\022\023\n\013axis_offset\030\003 \001(\001\022\023\n\013axis_le"
  "ngth\030\004 \001(\001\022\022\n\nascan_data\030\005 \001(\014\022)\n\005gates\030"
  "\006 \003(\0132\032.Proto.Union.HDBridge.Gate\"\252\001\n\nCo"
  "nfigData\022\027\n\017repeat_freqency\030\001 \001(\005\022\024\n\014emi"
  "t_voltage\030\002 \001(\005\022\024\n\014channel_flag\030\003 \001(\r\022\023\n"
  "\013damper_flag\030\004 \001(\005\022B\n\022channel_parameters"
  "\030\005 \003(\0132&.Proto.Union.HDBridge.ChannelPar"
  "ameter\"J\n\010ScanData\022>\n\014channel_data\030\001 \003(\013"
  "2(.Proto.Union.HDBridge.OneChannelScanDa"
  "ta\"C\n\016ScanDataVector\0221\n\tscan_data\030\001 \003(\0132"
  "\036.Proto.Union.HDBridge.ScanDatab\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_HDBridge_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_HDBridge_2eproto = {
    false, false, 879, descriptor_table_protodef_HDBridge_2eproto,
    "HDBridge.proto",
    &descriptor_table_HDBridge_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_HDBridge_2eproto::offsets,
    file_level_metadata_HDBridge_2eproto, file_level_enum_descriptors_HDBridge_2eproto,
    file_level_service_descriptors_HDBridge_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_HDBridge_2eproto_getter() {
  return &descriptor_table_HDBridge_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_HDBridge_2eproto(&descriptor_table_HDBridge_2eproto);
namespace Proto {
namespace Union {
namespace HDBridge {

// ===================================================================

class Gate::_Internal {
 public:
};

Gate::Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.Gate)
}
Gate::Gate(const Gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_, &from._impl_.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.Gate)
}

inline void Gate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Gate::~Gate() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.Gate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.Gate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.Gate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double pos = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = this->_internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pos(), target);
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double height = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // uint32 index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.Gate)
  return target;
}

size_t Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.Gate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = this->_internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    total_size += 1 + 8;
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double height = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // uint32 index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gate::GetClassData() const { return &_class_data_; }


void Gate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gate*>(&to_msg);
  auto& from = static_cast<const Gate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.Gate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = from._internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gate::CopyFrom(const Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate::IsInitialized() const {
  return true;
}

void Gate::InternalSwap(Gate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gate, _impl_.index_)
      + sizeof(Gate::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Gate, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[0]);
}

// ===================================================================

class ChannelParameter::_Internal {
 public:
};

ChannelParameter::ChannelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.ChannelParameter)
}
ChannelParameter::ChannelParameter(const ChannelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){from._impl_.gates_}
    , decltype(_impl_.sound_velocity_){}
    , decltype(_impl_.zero_bias_){}
    , decltype(_impl_.pulse_width_){}
    , decltype(_impl_.sampling_delay_){}
    , decltype(_impl_.sampling_depth_){}
    , decltype(_impl_.gain_){}
    , decltype(_impl_.sampling_factor_){}
    , decltype(_impl_.filter_band_){}
    , decltype(_impl_.demodu_mode_){}
    , decltype(_impl_.phase_reverse_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sound_velocity_, &from._impl_.sound_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_reverse_) -
    reinterpret_cast<char*>(&_impl_.sound_velocity_)) + sizeof(_impl_.phase_reverse_));
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.ChannelParameter)
}

inline void ChannelParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){arena}
    , decltype(_impl_.sound_velocity_){0}
    , decltype(_impl_.zero_bias_){0}
    , decltype(_impl_.pulse_width_){0}
    , decltype(_impl_.sampling_delay_){0}
    , decltype(_impl_.sampling_depth_){0}
    , decltype(_impl_.gain_){0}
    , decltype(_impl_.sampling_factor_){0}
    , decltype(_impl_.filter_band_){0}
    , decltype(_impl_.demodu_mode_){0}
    , decltype(_impl_.phase_reverse_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelParameter::~ChannelParameter() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.ChannelParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gates_.~RepeatedPtrField();
}

void ChannelParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.ChannelParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gates_.Clear();
  ::memset(&_impl_.sound_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.phase_reverse_) -
      reinterpret_cast<char*>(&_impl_.sound_velocity_)) + sizeof(_impl_.phase_reverse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double sound_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.sound_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double zero_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.zero_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pulse_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sampling_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.sampling_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sampling_depth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.sampling_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 sampling_factor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sampling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 filter_band = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.filter_band_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 demodu_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.demodu_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool phase_reverse = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.phase_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Union.HDBridge.Gate gates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.ChannelParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double sound_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sound_velocity = this->_internal_sound_velocity();
  uint64_t raw_sound_velocity;
  memcpy(&raw_sound_velocity, &tmp_sound_velocity, sizeof(tmp_sound_velocity));
  if (raw_sound_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_sound_velocity(), target);
  }

  // double zero_bias = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zero_bias = this->_internal_zero_bias();
  uint64_t raw_zero_bias;
  memcpy(&raw_zero_bias, &tmp_zero_bias, sizeof(tmp_zero_bias));
  if (raw_zero_bias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_zero_bias(), target);
  }

  // double pulse_width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pulse_width = this->_internal_pulse_width();
  uint64_t raw_pulse_width;
  memcpy(&raw_pulse_width, &tmp_pulse_width, sizeof(tmp_pulse_width));
  if (raw_pulse_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_pulse_width(), target);
  }

  // double sampling_delay = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_delay = this->_internal_sampling_delay();
  uint64_t raw_sampling_delay;
  memcpy(&raw_sampling_delay, &tmp_sampling_delay, sizeof(tmp_sampling_delay));
  if (raw_sampling_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_sampling_delay(), target);
  }

  // double sampling_depth = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_depth = this->_internal_sampling_depth();
  uint64_t raw_sampling_depth;
  memcpy(&raw_sampling_depth, &tmp_sampling_depth, sizeof(tmp_sampling_depth));
  if (raw_sampling_depth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_sampling_depth(), target);
  }

  // int32 sampling_factor = 6;
  if (this->_internal_sampling_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sampling_factor(), target);
  }

  // double gain = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = this->_internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_gain(), target);
  }

  // int32 filter_band = 8;
  if (this->_internal_filter_band() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_filter_band(), target);
  }

  // int32 demodu_mode = 9;
  if (this->_internal_demodu_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_demodu_mode(), target);
  }

  // bool phase_reverse = 10;
  if (this->_internal_phase_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_phase_reverse(), target);
  }

  // repeated .Proto.Union.HDBridge.Gate gates = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gates_size()); i < n; i++) {
    const auto& repfield = this->_internal_gates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.ChannelParameter)
  return target;
}

size_t ChannelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.ChannelParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.Gate gates = 11;
  total_size += 1UL * this->_internal_gates_size();
  for (const auto& msg : this->_impl_.gates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double sound_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sound_velocity = this->_internal_sound_velocity();
  uint64_t raw_sound_velocity;
  memcpy(&raw_sound_velocity, &tmp_sound_velocity, sizeof(tmp_sound_velocity));
  if (raw_sound_velocity != 0) {
    total_size += 1 + 8;
  }

  // double zero_bias = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zero_bias = this->_internal_zero_bias();
  uint64_t raw_zero_bias;
  memcpy(&raw_zero_bias, &tmp_zero_bias, sizeof(tmp_zero_bias));
  if (raw_zero_bias != 0) {
    total_size += 1 + 8;
  }

  // double pulse_width = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pulse_width = this->_internal_pulse_width();
  uint64_t raw_pulse_width;
  memcpy(&raw_pulse_width, &tmp_pulse_width, sizeof(tmp_pulse_width));
  if (raw_pulse_width != 0) {
    total_size += 1 + 8;
  }

  // double sampling_delay = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_delay = this->_internal_sampling_delay();
  uint64_t raw_sampling_delay;
  memcpy(&raw_sampling_delay, &tmp_sampling_delay, sizeof(tmp_sampling_delay));
  if (raw_sampling_delay != 0) {
    total_size += 1 + 8;
  }

  // double sampling_depth = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_depth = this->_internal_sampling_depth();
  uint64_t raw_sampling_depth;
  memcpy(&raw_sampling_depth, &tmp_sampling_depth, sizeof(tmp_sampling_depth));
  if (raw_sampling_depth != 0) {
    total_size += 1 + 8;
  }

  // double gain = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = this->_internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    total_size += 1 + 8;
  }

  // int32 sampling_factor = 6;
  if (this->_internal_sampling_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sampling_factor());
  }

  // int32 filter_band = 8;
  if (this->_internal_filter_band() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filter_band());
  }

  // int32 demodu_mode = 9;
  if (this->_internal_demodu_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_demodu_mode());
  }

  // bool phase_reverse = 10;
  if (this->_internal_phase_reverse() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelParameter::GetClassData() const { return &_class_data_; }


void ChannelParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelParameter*>(&to_msg);
  auto& from = static_cast<const ChannelParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.ChannelParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gates_.MergeFrom(from._impl_.gates_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sound_velocity = from._internal_sound_velocity();
  uint64_t raw_sound_velocity;
  memcpy(&raw_sound_velocity, &tmp_sound_velocity, sizeof(tmp_sound_velocity));
  if (raw_sound_velocity != 0) {
    _this->_internal_set_sound_velocity(from._internal_sound_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zero_bias = from._internal_zero_bias();
  uint64_t raw_zero_bias;
  memcpy(&raw_zero_bias, &tmp_zero_bias, sizeof(tmp_zero_bias));
  if (raw_zero_bias != 0) {
    _this->_internal_set_zero_bias(from._internal_zero_bias());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pulse_width = from._internal_pulse_width();
  uint64_t raw_pulse_width;
  memcpy(&raw_pulse_width, &tmp_pulse_width, sizeof(tmp_pulse_width));
  if (raw_pulse_width != 0) {
    _this->_internal_set_pulse_width(from._internal_pulse_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_delay = from._internal_sampling_delay();
  uint64_t raw_sampling_delay;
  memcpy(&raw_sampling_delay, &tmp_sampling_delay, sizeof(tmp_sampling_delay));
  if (raw_sampling_delay != 0) {
    _this->_internal_set_sampling_delay(from._internal_sampling_delay());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sampling_depth = from._internal_sampling_depth();
  uint64_t raw_sampling_depth;
  memcpy(&raw_sampling_depth, &tmp_sampling_depth, sizeof(tmp_sampling_depth));
  if (raw_sampling_depth != 0) {
    _this->_internal_set_sampling_depth(from._internal_sampling_depth());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gain = from._internal_gain();
  uint64_t raw_gain;
  memcpy(&raw_gain, &tmp_gain, sizeof(tmp_gain));
  if (raw_gain != 0) {
    _this->_internal_set_gain(from._internal_gain());
  }
  if (from._internal_sampling_factor() != 0) {
    _this->_internal_set_sampling_factor(from._internal_sampling_factor());
  }
  if (from._internal_filter_band() != 0) {
    _this->_internal_set_filter_band(from._internal_filter_band());
  }
  if (from._internal_demodu_mode() != 0) {
    _this->_internal_set_demodu_mode(from._internal_demodu_mode());
  }
  if (from._internal_phase_reverse() != 0) {
    _this->_internal_set_phase_reverse(from._internal_phase_reverse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelParameter::CopyFrom(const ChannelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.ChannelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelParameter::IsInitialized() const {
  return true;
}

void ChannelParameter::InternalSwap(ChannelParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gates_.InternalSwap(&other->_impl_.gates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.phase_reverse_)
      + sizeof(ChannelParameter::_impl_.phase_reverse_)
      - PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.sound_velocity_)>(
          reinterpret_cast<char*>(&_impl_.sound_velocity_),
          reinterpret_cast<char*>(&other->_impl_.sound_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[1]);
}

// ===================================================================

class OneChannelScanData::_Internal {
 public:
};

OneChannelScanData::OneChannelScanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.OneChannelScanData)
}
OneChannelScanData::OneChannelScanData(const OneChannelScanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OneChannelScanData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){from._impl_.gates_}
    , decltype(_impl_.ascan_data_){}
    , decltype(_impl_.pakcage_index_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.axis_offset_){}
    , decltype(_impl_.axis_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ascan_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ascan_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ascan_data().empty()) {
    _this->_impl_.ascan_data_.Set(from._internal_ascan_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pakcage_index_, &from._impl_.pakcage_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.axis_length_) -
    reinterpret_cast<char*>(&_impl_.pakcage_index_)) + sizeof(_impl_.axis_length_));
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.OneChannelScanData)
}

inline void OneChannelScanData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gates_){arena}
    , decltype(_impl_.ascan_data_){}
    , decltype(_impl_.pakcage_index_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.axis_offset_){0}
    , decltype(_impl_.axis_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ascan_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ascan_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneChannelScanData::~OneChannelScanData() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.OneChannelScanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneChannelScanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gates_.~RepeatedPtrField();
  _impl_.ascan_data_.Destroy();
}

void OneChannelScanData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OneChannelScanData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.OneChannelScanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gates_.Clear();
  _impl_.ascan_data_.ClearToEmpty();
  ::memset(&_impl_.pakcage_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.axis_length_) -
      reinterpret_cast<char*>(&_impl_.pakcage_index_)) + sizeof(_impl_.axis_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneChannelScanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pakcage_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pakcage_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double axis_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.axis_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double axis_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.axis_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes ascan_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ascan_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Union.HDBridge.Gate gates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneChannelScanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.OneChannelScanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pakcage_index = 1;
  if (this->_internal_pakcage_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pakcage_index(), target);
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // double axis_offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_offset = this->_internal_axis_offset();
  uint64_t raw_axis_offset;
  memcpy(&raw_axis_offset, &tmp_axis_offset, sizeof(tmp_axis_offset));
  if (raw_axis_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_axis_offset(), target);
  }

  // double axis_length = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_length = this->_internal_axis_length();
  uint64_t raw_axis_length;
  memcpy(&raw_axis_length, &tmp_axis_length, sizeof(tmp_axis_length));
  if (raw_axis_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_axis_length(), target);
  }

  // bytes ascan_data = 5;
  if (!this->_internal_ascan_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ascan_data(), target);
  }

  // repeated .Proto.Union.HDBridge.Gate gates = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gates_size()); i < n; i++) {
    const auto& repfield = this->_internal_gates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.OneChannelScanData)
  return target;
}

size_t OneChannelScanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.OneChannelScanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.Gate gates = 6;
  total_size += 1UL * this->_internal_gates_size();
  for (const auto& msg : this->_impl_.gates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ascan_data = 5;
  if (!this->_internal_ascan_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ascan_data());
  }

  // int32 pakcage_index = 1;
  if (this->_internal_pakcage_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pakcage_index());
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // double axis_offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_offset = this->_internal_axis_offset();
  uint64_t raw_axis_offset;
  memcpy(&raw_axis_offset, &tmp_axis_offset, sizeof(tmp_axis_offset));
  if (raw_axis_offset != 0) {
    total_size += 1 + 8;
  }

  // double axis_length = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_length = this->_internal_axis_length();
  uint64_t raw_axis_length;
  memcpy(&raw_axis_length, &tmp_axis_length, sizeof(tmp_axis_length));
  if (raw_axis_length != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneChannelScanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OneChannelScanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneChannelScanData::GetClassData() const { return &_class_data_; }


void OneChannelScanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OneChannelScanData*>(&to_msg);
  auto& from = static_cast<const OneChannelScanData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.OneChannelScanData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gates_.MergeFrom(from._impl_.gates_);
  if (!from._internal_ascan_data().empty()) {
    _this->_internal_set_ascan_data(from._internal_ascan_data());
  }
  if (from._internal_pakcage_index() != 0) {
    _this->_internal_set_pakcage_index(from._internal_pakcage_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_offset = from._internal_axis_offset();
  uint64_t raw_axis_offset;
  memcpy(&raw_axis_offset, &tmp_axis_offset, sizeof(tmp_axis_offset));
  if (raw_axis_offset != 0) {
    _this->_internal_set_axis_offset(from._internal_axis_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_axis_length = from._internal_axis_length();
  uint64_t raw_axis_length;
  memcpy(&raw_axis_length, &tmp_axis_length, sizeof(tmp_axis_length));
  if (raw_axis_length != 0) {
    _this->_internal_set_axis_length(from._internal_axis_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneChannelScanData::CopyFrom(const OneChannelScanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.OneChannelScanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChannelScanData::IsInitialized() const {
  return true;
}

void OneChannelScanData::InternalSwap(OneChannelScanData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gates_.InternalSwap(&other->_impl_.gates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ascan_data_, lhs_arena,
      &other->_impl_.ascan_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneChannelScanData, _impl_.axis_length_)
      + sizeof(OneChannelScanData::_impl_.axis_length_)
      - PROTOBUF_FIELD_OFFSET(OneChannelScanData, _impl_.pakcage_index_)>(
          reinterpret_cast<char*>(&_impl_.pakcage_index_),
          reinterpret_cast<char*>(&other->_impl_.pakcage_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneChannelScanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[2]);
}

// ===================================================================

class ConfigData::_Internal {
 public:
};

ConfigData::ConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.ConfigData)
}
ConfigData::ConfigData(const ConfigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_parameters_){from._impl_.channel_parameters_}
    , decltype(_impl_.repeat_freqency_){}
    , decltype(_impl_.emit_voltage_){}
    , decltype(_impl_.channel_flag_){}
    , decltype(_impl_.damper_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.repeat_freqency_, &from._impl_.repeat_freqency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damper_flag_) -
    reinterpret_cast<char*>(&_impl_.repeat_freqency_)) + sizeof(_impl_.damper_flag_));
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.ConfigData)
}

inline void ConfigData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_parameters_){arena}
    , decltype(_impl_.repeat_freqency_){0}
    , decltype(_impl_.emit_voltage_){0}
    , decltype(_impl_.channel_flag_){0u}
    , decltype(_impl_.damper_flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigData::~ConfigData() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.ConfigData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_parameters_.~RepeatedPtrField();
}

void ConfigData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.ConfigData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_parameters_.Clear();
  ::memset(&_impl_.repeat_freqency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damper_flag_) -
      reinterpret_cast<char*>(&_impl_.repeat_freqency_)) + sizeof(_impl_.damper_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 repeat_freqency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.repeat_freqency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 emit_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.emit_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damper_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.damper_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Proto.Union.HDBridge.ChannelParameter channel_parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.ConfigData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 repeat_freqency = 1;
  if (this->_internal_repeat_freqency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_repeat_freqency(), target);
  }

  // int32 emit_voltage = 2;
  if (this->_internal_emit_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_emit_voltage(), target);
  }

  // uint32 channel_flag = 3;
  if (this->_internal_channel_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_flag(), target);
  }

  // int32 damper_flag = 4;
  if (this->_internal_damper_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damper_flag(), target);
  }

  // repeated .Proto.Union.HDBridge.ChannelParameter channel_parameters = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.ConfigData)
  return target;
}

size_t ConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.ConfigData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.ChannelParameter channel_parameters = 5;
  total_size += 1UL * this->_internal_channel_parameters_size();
  for (const auto& msg : this->_impl_.channel_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 repeat_freqency = 1;
  if (this->_internal_repeat_freqency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_repeat_freqency());
  }

  // int32 emit_voltage = 2;
  if (this->_internal_emit_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_emit_voltage());
  }

  // uint32 channel_flag = 3;
  if (this->_internal_channel_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_flag());
  }

  // int32 damper_flag = 4;
  if (this->_internal_damper_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damper_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigData::GetClassData() const { return &_class_data_; }


void ConfigData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigData*>(&to_msg);
  auto& from = static_cast<const ConfigData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.ConfigData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_parameters_.MergeFrom(from._impl_.channel_parameters_);
  if (from._internal_repeat_freqency() != 0) {
    _this->_internal_set_repeat_freqency(from._internal_repeat_freqency());
  }
  if (from._internal_emit_voltage() != 0) {
    _this->_internal_set_emit_voltage(from._internal_emit_voltage());
  }
  if (from._internal_channel_flag() != 0) {
    _this->_internal_set_channel_flag(from._internal_channel_flag());
  }
  if (from._internal_damper_flag() != 0) {
    _this->_internal_set_damper_flag(from._internal_damper_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigData::CopyFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {
  return true;
}

void ConfigData::InternalSwap(ConfigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_parameters_.InternalSwap(&other->_impl_.channel_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigData, _impl_.damper_flag_)
      + sizeof(ConfigData::_impl_.damper_flag_)
      - PROTOBUF_FIELD_OFFSET(ConfigData, _impl_.repeat_freqency_)>(
          reinterpret_cast<char*>(&_impl_.repeat_freqency_),
          reinterpret_cast<char*>(&other->_impl_.repeat_freqency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[3]);
}

// ===================================================================

class ScanData::_Internal {
 public:
};

ScanData::ScanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.ScanData)
}
ScanData::ScanData(const ScanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScanData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_data_){from._impl_.channel_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.ScanData)
}

inline void ScanData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScanData::~ScanData() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.ScanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_data_.~RepeatedPtrField();
}

void ScanData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScanData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.ScanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Proto.Union.HDBridge.OneChannelScanData channel_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.ScanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.OneChannelScanData channel_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.ScanData)
  return target;
}

size_t ScanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.ScanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.OneChannelScanData channel_data = 1;
  total_size += 1UL * this->_internal_channel_data_size();
  for (const auto& msg : this->_impl_.channel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScanData::GetClassData() const { return &_class_data_; }


void ScanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScanData*>(&to_msg);
  auto& from = static_cast<const ScanData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.ScanData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_data_.MergeFrom(from._impl_.channel_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScanData::CopyFrom(const ScanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.ScanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanData::IsInitialized() const {
  return true;
}

void ScanData::InternalSwap(ScanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_data_.InternalSwap(&other->_impl_.channel_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[4]);
}

// ===================================================================

class ScanDataVector::_Internal {
 public:
};

ScanDataVector::ScanDataVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Proto.Union.HDBridge.ScanDataVector)
}
ScanDataVector::ScanDataVector(const ScanDataVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScanDataVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scan_data_){from._impl_.scan_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Union.HDBridge.ScanDataVector)
}

inline void ScanDataVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scan_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScanDataVector::~ScanDataVector() {
  // @@protoc_insertion_point(destructor:Proto.Union.HDBridge.ScanDataVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScanDataVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scan_data_.~RepeatedPtrField();
}

void ScanDataVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScanDataVector::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Union.HDBridge.ScanDataVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scan_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDataVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Proto.Union.HDBridge.ScanData scan_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scan_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScanDataVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Union.HDBridge.ScanDataVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.ScanData scan_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scan_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_scan_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Union.HDBridge.ScanDataVector)
  return target;
}

size_t ScanDataVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Union.HDBridge.ScanDataVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Union.HDBridge.ScanData scan_data = 1;
  total_size += 1UL * this->_internal_scan_data_size();
  for (const auto& msg : this->_impl_.scan_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScanDataVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScanDataVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScanDataVector::GetClassData() const { return &_class_data_; }


void ScanDataVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScanDataVector*>(&to_msg);
  auto& from = static_cast<const ScanDataVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Proto.Union.HDBridge.ScanDataVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scan_data_.MergeFrom(from._impl_.scan_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScanDataVector::CopyFrom(const ScanDataVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Union.HDBridge.ScanDataVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDataVector::IsInitialized() const {
  return true;
}

void ScanDataVector::InternalSwap(ScanDataVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scan_data_.InternalSwap(&other->_impl_.scan_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDataVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HDBridge_2eproto_getter, &descriptor_table_HDBridge_2eproto_once,
      file_level_metadata_HDBridge_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HDBridge
}  // namespace Union
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::Gate*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::Gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::Gate >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::ChannelParameter*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::ChannelParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::ChannelParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::OneChannelScanData*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::OneChannelScanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::OneChannelScanData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::ConfigData*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::ConfigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::ConfigData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::ScanData*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::ScanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::ScanData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Union::HDBridge::ScanDataVector*
Arena::CreateMaybeMessage< ::Proto::Union::HDBridge::ScanDataVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto::Union::HDBridge::ScanDataVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
