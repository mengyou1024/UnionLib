// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AScan.proto

#include "AScan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Union {
namespace AScan {
namespace Proto {
PROTOBUF_CONSTEXPR Performance::Performance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.horizontallinearity_)*/0
  , /*decltype(_impl_.verticallinearity_)*/0
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_.dynamicrange_)*/0
  , /*decltype(_impl_.surplussensitivity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceDefaultTypeInternal() {}
  union {
    Performance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceDefaultTypeInternal _Performance_default_instance_;
PROTOBUF_CONSTEXPR Gate::Gate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.idx_)*/0
  , /*decltype(_impl_.pos_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GateDefaultTypeInternal() {}
  union {
    Gate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GateDefaultTypeInternal _Gate_default_instance_;
PROTOBUF_CONSTEXPR DACCriteriaBias::DACCriteriaBias(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rlbias_)*/0
  , /*decltype(_impl_.slbias_)*/0
  , /*decltype(_impl_.elbias_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DACCriteriaBiasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DACCriteriaBiasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DACCriteriaBiasDefaultTypeInternal() {}
  union {
    DACCriteriaBias _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DACCriteriaBiasDefaultTypeInternal _DACCriteriaBias_default_instance_;
PROTOBUF_CONSTEXPR DAC::DAC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.criteriabias_)*/nullptr
  , /*decltype(_impl_.basegain_)*/0
  , /*decltype(_impl_.compensatinggain_)*/0
  , /*decltype(_impl_.equivalent_)*/0
  , /*decltype(_impl_.criteria_)*/0
  , /*decltype(_impl_.issubline_)*/false
  , /*decltype(_impl_.samplingxaxisbias_)*/0
  , /*decltype(_impl_.samplingxaxislen_)*/0} {}
struct DACDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DACDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DACDefaultTypeInternal() {}
  union {
    DAC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DACDefaultTypeInternal _DAC_default_instance_;
PROTOBUF_CONSTEXPR AVG::AVG(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.basegain_)*/0
  , /*decltype(_impl_.compensatinggain_)*/0
  , /*decltype(_impl_.scangain_)*/0
  , /*decltype(_impl_.issubline_)*/false
  , /*decltype(_impl_.samplingxaxisbias_)*/0
  , /*decltype(_impl_.samplingxaxislen_)*/0
  , /*decltype(_impl_.diameter_)*/0
  , /*decltype(_impl_.reflectordiameter_)*/0
  , /*decltype(_impl_.reflectormaxdepth_)*/0
  , /*decltype(_impl_.equivalent_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AVGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AVGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AVGDefaultTypeInternal() {}
  union {
    AVG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AVGDefaultTypeInternal _AVG_default_instance_;
PROTOBUF_CONSTEXPR InstrumentParameter::InstrumentParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.performance_)*/nullptr
  , /*decltype(_impl_.probe_)*/0
  , /*decltype(_impl_.probefrequence_)*/0
  , /*decltype(_impl_.probechipshapel_)*/0
  , /*decltype(_impl_.probechipshapeh_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.soundvelocity_)*/0
  , /*decltype(_impl_.probefrontdistance_)*/0
  , /*decltype(_impl_.zeropoint_)*/0
  , /*decltype(_impl_.channel_)*/0} {}
struct InstrumentParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentParameterDefaultTypeInternal() {}
  union {
    InstrumentParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentParameterDefaultTypeInternal _InstrumentParameter_default_instance_;
PROTOBUF_CONSTEXPR ChannelParameter::ChannelParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gate_)*/{}
  , /*decltype(_impl_.ascan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dac_)*/nullptr
  , /*decltype(_impl_.avg_)*/nullptr
  , /*decltype(_impl_.performance_)*/nullptr
  , /*decltype(_impl_.axisbias_)*/0
  , /*decltype(_impl_.axislen_)*/0
  , /*decltype(_impl_.basegain_)*/0
  , /*decltype(_impl_.scangain_)*/0
  , /*decltype(_impl_.compensatinggain_)*/0
  , /*decltype(_impl_.suppression_)*/0
  , /*decltype(_impl_.distancemode_)*/0} {}
struct ChannelParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelParameterDefaultTypeInternal() {}
  union {
    ChannelParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelParameterDefaultTypeInternal _ChannelParameter_default_instance_;
PROTOBUF_CONSTEXPR AScanPayload::AScanPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cameradata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrumentparameter_)*/nullptr
  , /*decltype(_impl_.channelparameter_)*/nullptr} {}
struct AScanPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AScanPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AScanPayloadDefaultTypeInternal() {}
  union {
    AScanPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AScanPayloadDefaultTypeInternal _AScanPayload_default_instance_;
PROTOBUF_CONSTEXPR AScanHead::AScanHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrumentname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AScanHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AScanHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AScanHeadDefaultTypeInternal() {}
  union {
    AScanHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AScanHeadDefaultTypeInternal _AScanHead_default_instance_;
PROTOBUF_CONSTEXPR AScanProtoType::AScanProtoType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AScanProtoTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AScanProtoTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AScanProtoTypeDefaultTypeInternal() {}
  union {
    AScanProtoType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AScanProtoTypeDefaultTypeInternal _AScanProtoType_default_instance_;
}  // namespace Proto
}  // namespace AScan
}  // namespace Union
static ::_pb::Metadata file_level_metadata_AScan_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_AScan_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AScan_2eproto = nullptr;

const uint32_t TableStruct_AScan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.horizontallinearity_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.verticallinearity_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.dynamicrange_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.surplussensitivity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.rlbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.slbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.elbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.basegain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.compensatinggain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.equivalent_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.criteria_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.criteriabias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.issubline_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.samplingxaxisbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.samplingxaxislen_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.basegain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.compensatinggain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.scangain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.issubline_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.samplingxaxisbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.samplingxaxislen_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.diameter_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.reflectordiameter_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.reflectormaxdepth_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.equivalent_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probe_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probefrequence_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probechipshapel_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probechipshapeh_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.soundvelocity_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probefrontdistance_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.zeropoint_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.performance_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.gate_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.ascan_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.axisbias_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.axislen_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.basegain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.scangain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.compensatinggain_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.suppression_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.distancemode_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.dac_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.avg_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.performance_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.instrumentparameter_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.channelparameter_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.cameradata_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _impl_.instrumentname_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanProtoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanProtoType, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanProtoType, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Union::AScan::Proto::Performance)},
  { 11, -1, -1, sizeof(::Union::AScan::Proto::Gate)},
  { 21, -1, -1, sizeof(::Union::AScan::Proto::DACCriteriaBias)},
  { 30, 46, -1, sizeof(::Union::AScan::Proto::DAC)},
  { 56, -1, -1, sizeof(::Union::AScan::Proto::AVG)},
  { 74, 90, -1, sizeof(::Union::AScan::Proto::InstrumentParameter)},
  { 100, 118, -1, sizeof(::Union::AScan::Proto::ChannelParameter)},
  { 130, 139, -1, sizeof(::Union::AScan::Proto::AScanPayload)},
  { 142, -1, -1, sizeof(::Union::AScan::Proto::AScanHead)},
  { 150, -1, -1, sizeof(::Union::AScan::Proto::AScanProtoType)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Union::AScan::Proto::_Performance_default_instance_._instance,
  &::Union::AScan::Proto::_Gate_default_instance_._instance,
  &::Union::AScan::Proto::_DACCriteriaBias_default_instance_._instance,
  &::Union::AScan::Proto::_DAC_default_instance_._instance,
  &::Union::AScan::Proto::_AVG_default_instance_._instance,
  &::Union::AScan::Proto::_InstrumentParameter_default_instance_._instance,
  &::Union::AScan::Proto::_ChannelParameter_default_instance_._instance,
  &::Union::AScan::Proto::_AScanPayload_default_instance_._instance,
  &::Union::AScan::Proto::_AScanHead_default_instance_._instance,
  &::Union::AScan::Proto::_AScanProtoType_default_instance_._instance,
};

const char descriptor_table_protodef_AScan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013AScan.proto\022\021Union.AScan.Proto\"\213\001\n\013Per"
  "formance\022\033\n\023horizontalLinearity\030\001 \001(\002\022\031\n"
  "\021verticalLinearity\030\002 \001(\002\022\022\n\nresolution\030\003"
  " \001(\002\022\024\n\014dynamicRange\030\004 \001(\002\022\032\n\022surplusSen"
  "sitivity\030\005 \001(\002\"\?\n\004Gate\022\013\n\003idx\030\001 \001(\005\022\013\n\003p"
  "os\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\""
  "A\n\017DACCriteriaBias\022\016\n\006rlBias\030\001 \001(\021\022\016\n\006sl"
  "Bias\030\002 \001(\021\022\016\n\006elBias\030\003 \001(\021\"\255\002\n\003DAC\022\020\n\010ba"
  "seGain\030\001 \001(\002\022\030\n\020compensatingGain\030\002 \001(\002\022\r"
  "\n\005index\030\003 \003(\002\022\r\n\005value\030\004 \003(\002\022\022\n\nequivale"
  "nt\030\005 \001(\002\0220\n\010criteria\030\006 \001(\0162\036.Union.AScan"
  ".Proto.DACCriteria\022=\n\014criteriaBias\030\007 \001(\013"
  "2\".Union.AScan.Proto.DACCriteriaBiasH\000\210\001"
  "\001\022\021\n\tisSubLine\030\010 \001(\010\022\031\n\021samplingXAxisBia"
  "s\030\t \001(\002\022\030\n\020samplingXAxisLen\030\n \001(\002B\017\n\r_cr"
  "iteriaBias\"\205\002\n\003AVG\022\020\n\010baseGain\030\001 \001(\002\022\030\n\020"
  "compensatingGain\030\002 \001(\002\022\020\n\010scanGain\030\003 \001(\002"
  "\022\r\n\005index\030\004 \003(\002\022\r\n\005value\030\005 \003(\002\022\021\n\tisSubL"
  "ine\030\006 \001(\010\022\031\n\021samplingXAxisBias\030\007 \001(\002\022\030\n\020"
  "samplingXAxisLen\030\010 \001(\002\022\020\n\010diameter\030\t \001(\002"
  "\022\031\n\021reflectorDiameter\030\n \001(\002\022\031\n\021reflector"
  "MaxDepth\030\013 \001(\002\022\022\n\nequivalent\030\014 \001(\002\"\270\002\n\023I"
  "nstrumentParameter\022\'\n\005probe\030\003 \001(\0162\030.Unio"
  "n.AScan.Proto.Probe\022\026\n\016probeFrequence\030\004 "
  "\001(\002\022\027\n\017probeChipShapeL\030\005 \001(\002\022\027\n\017probeChi"
  "pShapeH\030\006 \001(\002\022\r\n\005angle\030\007 \001(\002\022\025\n\rsoundVel"
  "ocity\030\010 \001(\002\022\032\n\022probeFrontDistance\030\t \001(\002\022"
  "\021\n\tzeroPoint\030\n \001(\002\022\017\n\007channel\030\013 \001(\005\0228\n\013p"
  "erformance\030\014 \001(\0132\036.Union.AScan.Proto.Per"
  "formanceH\000\210\001\001B\016\n\014_performance\"\243\003\n\020Channe"
  "lParameter\022%\n\004gate\030\001 \003(\0132\027.Union.AScan.P"
  "roto.Gate\022\r\n\005ascan\030\002 \001(\014\022\020\n\010axisBias\030\003 \001"
  "(\002\022\017\n\007axisLen\030\004 \001(\002\022\020\n\010baseGain\030\005 \001(\002\022\020\n"
  "\010scanGain\030\006 \001(\002\022\030\n\020compensatingGain\030\007 \001("
  "\002\022\023\n\013suppression\030\010 \001(\005\0225\n\014distanceMode\030\t"
  " \001(\0162\037.Union.AScan.Proto.DistanceMode\022(\n"
  "\003dac\030\n \001(\0132\026.Union.AScan.Proto.DACH\000\210\001\001\022"
  "(\n\003avg\030\013 \001(\0132\026.Union.AScan.Proto.AVGH\001\210\001"
  "\001\0228\n\013performance\030\014 \001(\0132\036.Union.AScan.Pro"
  "to.PerformanceH\002\210\001\001B\006\n\004_dacB\006\n\004_avgB\016\n\014_"
  "performance\"\272\001\n\014AScanPayload\022C\n\023instrume"
  "ntParameter\030\001 \001(\0132&.Union.AScan.Proto.In"
  "strumentParameter\022=\n\020channelParameter\030\002 "
  "\001(\0132#.Union.AScan.Proto.ChannelParameter"
  "\022\027\n\ncameraData\030\003 \001(\014H\000\210\001\001B\r\n\013_cameraData"
  "\"1\n\tAScanHead\022\026\n\016instrumentName\030\001 \001(\t\022\014\n"
  "\004time\030\002 \001(\t\"n\n\016AScanProtoType\022*\n\004head\030\001 "
  "\001(\0132\034.Union.AScan.Proto.AScanHead\0220\n\007pay"
  "load\030\002 \003(\0132\037.Union.AScan.Proto.AScanPayl"
  "oad*\230\001\n\005Probe\022\017\n\013NormalProbe\020\000\022\020\n\014Obliqu"
  "eProbe\020\001\022*\n&TwinCrystalLongitudinalWaveN"
  "ormalprobe\020\002\022\024\n\020PenetrationProbe\020\003\022*\n&Tw"
  "inCrystaLongitudinalWaveObliqueProbe\020\004*/"
  "\n\013DACCriteria\022\010\n\004None\020\000\022\006\n\002RL\020\001\022\006\n\002SL\020\002\022"
  "\006\n\002EL\020\003*#\n\014DistanceMode\022\005\n\001Y\020\000\022\005\n\001X\020\001\022\005\n"
  "\001S\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_AScan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AScan_2eproto = {
    false, false, 2212, descriptor_table_protodef_AScan_2eproto,
    "AScan.proto",
    &descriptor_table_AScan_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_AScan_2eproto::offsets,
    file_level_metadata_AScan_2eproto, file_level_enum_descriptors_AScan_2eproto,
    file_level_service_descriptors_AScan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AScan_2eproto_getter() {
  return &descriptor_table_AScan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AScan_2eproto(&descriptor_table_AScan_2eproto);
namespace Union {
namespace AScan {
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Probe_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[0];
}
bool Probe_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DACCriteria_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[1];
}
bool DACCriteria_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[2];
}
bool DistanceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Performance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.horizontallinearity_){}
    , decltype(_impl_.verticallinearity_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.dynamicrange_){}
    , decltype(_impl_.surplussensitivity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.horizontallinearity_, &from._impl_.horizontallinearity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.surplussensitivity_) -
    reinterpret_cast<char*>(&_impl_.horizontallinearity_)) + sizeof(_impl_.surplussensitivity_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.Performance)
}

inline void Performance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.horizontallinearity_){0}
    , decltype(_impl_.verticallinearity_){0}
    , decltype(_impl_.resolution_){0}
    , decltype(_impl_.dynamicrange_){0}
    , decltype(_impl_.surplussensitivity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.Performance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Performance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Performance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.Performance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.horizontallinearity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.surplussensitivity_) -
      reinterpret_cast<char*>(&_impl_.horizontallinearity_)) + sizeof(_impl_.surplussensitivity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Performance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float horizontalLinearity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.horizontallinearity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float verticalLinearity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.verticallinearity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dynamicRange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.dynamicrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float surplusSensitivity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.surplussensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Performance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.Performance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float horizontalLinearity = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontallinearity = this->_internal_horizontallinearity();
  uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_horizontallinearity(), target);
  }

  // float verticalLinearity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticallinearity = this->_internal_verticallinearity();
  uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_verticallinearity(), target);
  }

  // float resolution = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_resolution(), target);
  }

  // float dynamicRange = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dynamicrange = this->_internal_dynamicrange();
  uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dynamicrange(), target);
  }

  // float surplusSensitivity = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplussensitivity = this->_internal_surplussensitivity();
  uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_surplussensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.Performance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float horizontalLinearity = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontallinearity = this->_internal_horizontallinearity();
  uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    total_size += 1 + 4;
  }

  // float verticalLinearity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticallinearity = this->_internal_verticallinearity();
  uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    total_size += 1 + 4;
  }

  // float resolution = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 4;
  }

  // float dynamicRange = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dynamicrange = this->_internal_dynamicrange();
  uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    total_size += 1 + 4;
  }

  // float surplusSensitivity = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplussensitivity = this->_internal_surplussensitivity();
  uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Performance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Performance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Performance::GetClassData() const { return &_class_data_; }


void Performance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Performance*>(&to_msg);
  auto& from = static_cast<const Performance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.Performance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontallinearity = from._internal_horizontallinearity();
  uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    _this->_internal_set_horizontallinearity(from._internal_horizontallinearity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticallinearity = from._internal_verticallinearity();
  uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    _this->_internal_set_verticallinearity(from._internal_verticallinearity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = from._internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dynamicrange = from._internal_dynamicrange();
  uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    _this->_internal_set_dynamicrange(from._internal_dynamicrange());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplussensitivity = from._internal_surplussensitivity();
  uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    _this->_internal_set_surplussensitivity(from._internal_surplussensitivity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Performance, _impl_.surplussensitivity_)
      + sizeof(Performance::_impl_.surplussensitivity_)
      - PROTOBUF_FIELD_OFFSET(Performance, _impl_.horizontallinearity_)>(
          reinterpret_cast<char*>(&_impl_.horizontallinearity_),
          reinterpret_cast<char*>(&other->_impl_.horizontallinearity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[0]);
}

// ===================================================================

class Gate::_Internal {
 public:
};

Gate::Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.Gate)
}
Gate::Gate(const Gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.idx_){}
    , decltype(_impl_.pos_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.Gate)
}

inline void Gate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.idx_){0}
    , decltype(_impl_.pos_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Gate::~Gate() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.Gate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.Gate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.Gate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // float pos = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos = this->_internal_pos();
  uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos(), target);
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.Gate)
  return target;
}

size_t Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.Gate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
  }

  // float pos = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos = this->_internal_pos();
  uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gate::GetClassData() const { return &_class_data_; }


void Gate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gate*>(&to_msg);
  auto& from = static_cast<const Gate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.Gate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos = from._internal_pos();
  uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gate::CopyFrom(const Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate::IsInitialized() const {
  return true;
}

void Gate::InternalSwap(Gate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gate, _impl_.height_)
      + sizeof(Gate::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Gate, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[1]);
}

// ===================================================================

class DACCriteriaBias::_Internal {
 public:
};

DACCriteriaBias::DACCriteriaBias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.DACCriteriaBias)
}
DACCriteriaBias::DACCriteriaBias(const DACCriteriaBias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DACCriteriaBias* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rlbias_){}
    , decltype(_impl_.slbias_){}
    , decltype(_impl_.elbias_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rlbias_, &from._impl_.rlbias_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elbias_) -
    reinterpret_cast<char*>(&_impl_.rlbias_)) + sizeof(_impl_.elbias_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.DACCriteriaBias)
}

inline void DACCriteriaBias::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rlbias_){0}
    , decltype(_impl_.slbias_){0}
    , decltype(_impl_.elbias_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DACCriteriaBias::~DACCriteriaBias() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.DACCriteriaBias)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DACCriteriaBias::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DACCriteriaBias::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DACCriteriaBias::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.DACCriteriaBias)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rlbias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elbias_) -
      reinterpret_cast<char*>(&_impl_.rlbias_)) + sizeof(_impl_.elbias_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DACCriteriaBias::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 rlBias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rlbias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 slBias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slbias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 elBias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.elbias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DACCriteriaBias::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.DACCriteriaBias)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 rlBias = 1;
  if (this->_internal_rlbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_rlbias(), target);
  }

  // sint32 slBias = 2;
  if (this->_internal_slbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_slbias(), target);
  }

  // sint32 elBias = 3;
  if (this->_internal_elbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_elbias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.DACCriteriaBias)
  return target;
}

size_t DACCriteriaBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.DACCriteriaBias)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 rlBias = 1;
  if (this->_internal_rlbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_rlbias());
  }

  // sint32 slBias = 2;
  if (this->_internal_slbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_slbias());
  }

  // sint32 elBias = 3;
  if (this->_internal_elbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_elbias());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DACCriteriaBias::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DACCriteriaBias::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DACCriteriaBias::GetClassData() const { return &_class_data_; }


void DACCriteriaBias::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DACCriteriaBias*>(&to_msg);
  auto& from = static_cast<const DACCriteriaBias&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.DACCriteriaBias)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rlbias() != 0) {
    _this->_internal_set_rlbias(from._internal_rlbias());
  }
  if (from._internal_slbias() != 0) {
    _this->_internal_set_slbias(from._internal_slbias());
  }
  if (from._internal_elbias() != 0) {
    _this->_internal_set_elbias(from._internal_elbias());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DACCriteriaBias::CopyFrom(const DACCriteriaBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.DACCriteriaBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DACCriteriaBias::IsInitialized() const {
  return true;
}

void DACCriteriaBias::InternalSwap(DACCriteriaBias* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.elbias_)
      + sizeof(DACCriteriaBias::_impl_.elbias_)
      - PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.rlbias_)>(
          reinterpret_cast<char*>(&_impl_.rlbias_),
          reinterpret_cast<char*>(&other->_impl_.rlbias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DACCriteriaBias::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[2]);
}

// ===================================================================

class DAC::_Internal {
 public:
  using HasBits = decltype(std::declval<DAC>()._impl_._has_bits_);
  static const ::Union::AScan::Proto::DACCriteriaBias& criteriabias(const DAC* msg);
  static void set_has_criteriabias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Union::AScan::Proto::DACCriteriaBias&
DAC::_Internal::criteriabias(const DAC* msg) {
  return *msg->_impl_.criteriabias_;
}
DAC::DAC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.DAC)
}
DAC::DAC(const DAC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DAC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){from._impl_.index_}
    , decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.criteriabias_){nullptr}
    , decltype(_impl_.basegain_){}
    , decltype(_impl_.compensatinggain_){}
    , decltype(_impl_.equivalent_){}
    , decltype(_impl_.criteria_){}
    , decltype(_impl_.issubline_){}
    , decltype(_impl_.samplingxaxisbias_){}
    , decltype(_impl_.samplingxaxislen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_criteriabias()) {
    _this->_impl_.criteriabias_ = new ::Union::AScan::Proto::DACCriteriaBias(*from._impl_.criteriabias_);
  }
  ::memcpy(&_impl_.basegain_, &from._impl_.basegain_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.samplingxaxislen_) -
    reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.samplingxaxislen_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.DAC)
}

inline void DAC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){arena}
    , decltype(_impl_.value_){arena}
    , decltype(_impl_.criteriabias_){nullptr}
    , decltype(_impl_.basegain_){0}
    , decltype(_impl_.compensatinggain_){0}
    , decltype(_impl_.equivalent_){0}
    , decltype(_impl_.criteria_){0}
    , decltype(_impl_.issubline_){false}
    , decltype(_impl_.samplingxaxisbias_){0}
    , decltype(_impl_.samplingxaxislen_){0}
  };
}

DAC::~DAC() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.DAC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DAC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.value_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.criteriabias_;
}

void DAC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DAC::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.DAC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.value_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.criteriabias_ != nullptr);
    _impl_.criteriabias_->Clear();
  }
  ::memset(&_impl_.basegain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.samplingxaxislen_) -
      reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.samplingxaxislen_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float baseGain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.basegain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float compensatingGain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.compensatinggain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float equivalent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.equivalent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Union.AScan.Proto.DACCriteria criteria = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_criteria(static_cast<::Union::AScan::Proto::DACCriteria>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_criteriabias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSubLine = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.issubline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float samplingXAxisBias = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.samplingxaxisbias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float samplingXAxisLen = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.samplingxaxislen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DAC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.DAC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float baseGain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_basegain(), target);
  }

  // float compensatingGain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_compensatinggain(), target);
  }

  // repeated float index = 3;
  if (this->_internal_index_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_index(), target);
  }

  // repeated float value = 4;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_value(), target);
  }

  // float equivalent = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_equivalent(), target);
  }

  // .Union.AScan.Proto.DACCriteria criteria = 6;
  if (this->_internal_criteria() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_criteria(), target);
  }

  // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
  if (_internal_has_criteriabias()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::criteriabias(this),
        _Internal::criteriabias(this).GetCachedSize(), target, stream);
  }

  // bool isSubLine = 8;
  if (this->_internal_issubline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_issubline(), target);
  }

  // float samplingXAxisBias = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_samplingxaxisbias(), target);
  }

  // float samplingXAxisLen = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_samplingxaxislen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.DAC)
  return target;
}

size_t DAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.DAC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float index = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_index_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float value = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.criteriabias_);
  }

  // float baseGain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 1 + 4;
  }

  // float compensatingGain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 1 + 4;
  }

  // float equivalent = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    total_size += 1 + 4;
  }

  // .Union.AScan.Proto.DACCriteria criteria = 6;
  if (this->_internal_criteria() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_criteria());
  }

  // bool isSubLine = 8;
  if (this->_internal_issubline() != 0) {
    total_size += 1 + 1;
  }

  // float samplingXAxisBias = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    total_size += 1 + 4;
  }

  // float samplingXAxisLen = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DAC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DAC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DAC::GetClassData() const { return &_class_data_; }


void DAC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DAC*>(&to_msg);
  auto& from = static_cast<const DAC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.DAC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  if (from._internal_has_criteriabias()) {
    _this->_internal_mutable_criteriabias()->::Union::AScan::Proto::DACCriteriaBias::MergeFrom(
        from._internal_criteriabias());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_internal_set_basegain(from._internal_basegain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_internal_set_compensatinggain(from._internal_compensatinggain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = from._internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    _this->_internal_set_equivalent(from._internal_equivalent());
  }
  if (from._internal_criteria() != 0) {
    _this->_internal_set_criteria(from._internal_criteria());
  }
  if (from._internal_issubline() != 0) {
    _this->_internal_set_issubline(from._internal_issubline());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = from._internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    _this->_internal_set_samplingxaxisbias(from._internal_samplingxaxisbias());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = from._internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    _this->_internal_set_samplingxaxislen(from._internal_samplingxaxislen());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DAC::CopyFrom(const DAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.DAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAC::IsInitialized() const {
  return true;
}

void DAC::InternalSwap(DAC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxislen_)
      + sizeof(DAC::_impl_.samplingxaxislen_)
      - PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteriabias_)>(
          reinterpret_cast<char*>(&_impl_.criteriabias_),
          reinterpret_cast<char*>(&other->_impl_.criteriabias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[3]);
}

// ===================================================================

class AVG::_Internal {
 public:
};

AVG::AVG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AVG)
}
AVG::AVG(const AVG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AVG* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){from._impl_.index_}
    , decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.basegain_){}
    , decltype(_impl_.compensatinggain_){}
    , decltype(_impl_.scangain_){}
    , decltype(_impl_.issubline_){}
    , decltype(_impl_.samplingxaxisbias_){}
    , decltype(_impl_.samplingxaxislen_){}
    , decltype(_impl_.diameter_){}
    , decltype(_impl_.reflectordiameter_){}
    , decltype(_impl_.reflectormaxdepth_){}
    , decltype(_impl_.equivalent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.basegain_, &from._impl_.basegain_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equivalent_) -
    reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.equivalent_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AVG)
}

inline void AVG::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){arena}
    , decltype(_impl_.value_){arena}
    , decltype(_impl_.basegain_){0}
    , decltype(_impl_.compensatinggain_){0}
    , decltype(_impl_.scangain_){0}
    , decltype(_impl_.issubline_){false}
    , decltype(_impl_.samplingxaxisbias_){0}
    , decltype(_impl_.samplingxaxislen_){0}
    , decltype(_impl_.diameter_){0}
    , decltype(_impl_.reflectordiameter_){0}
    , decltype(_impl_.reflectormaxdepth_){0}
    , decltype(_impl_.equivalent_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AVG::~AVG() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AVG)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AVG::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.~RepeatedField();
  _impl_.value_.~RepeatedField();
}

void AVG::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AVG::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AVG)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.value_.Clear();
  ::memset(&_impl_.basegain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equivalent_) -
      reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.equivalent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVG::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float baseGain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.basegain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float compensatingGain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.compensatinggain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scanGain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.scangain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool isSubLine = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.issubline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float samplingXAxisBias = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.samplingxaxisbias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float samplingXAxisLen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.samplingxaxislen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float diameter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float reflectorDiameter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.reflectordiameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float reflectorMaxDepth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.reflectormaxdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float equivalent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.equivalent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AVG::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AVG)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float baseGain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_basegain(), target);
  }

  // float compensatingGain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_compensatinggain(), target);
  }

  // float scanGain = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_scangain(), target);
  }

  // repeated float index = 4;
  if (this->_internal_index_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_index(), target);
  }

  // repeated float value = 5;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_value(), target);
  }

  // bool isSubLine = 6;
  if (this->_internal_issubline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_issubline(), target);
  }

  // float samplingXAxisBias = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_samplingxaxisbias(), target);
  }

  // float samplingXAxisLen = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_samplingxaxislen(), target);
  }

  // float diameter = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diameter = this->_internal_diameter();
  uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_diameter(), target);
  }

  // float reflectorDiameter = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectordiameter = this->_internal_reflectordiameter();
  uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_reflectordiameter(), target);
  }

  // float reflectorMaxDepth = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = this->_internal_reflectormaxdepth();
  uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_reflectormaxdepth(), target);
  }

  // float equivalent = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_equivalent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AVG)
  return target;
}

size_t AVG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AVG)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float index = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_index_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // float baseGain = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 1 + 4;
  }

  // float compensatingGain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 1 + 4;
  }

  // float scanGain = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    total_size += 1 + 4;
  }

  // bool isSubLine = 6;
  if (this->_internal_issubline() != 0) {
    total_size += 1 + 1;
  }

  // float samplingXAxisBias = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    total_size += 1 + 4;
  }

  // float samplingXAxisLen = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    total_size += 1 + 4;
  }

  // float diameter = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diameter = this->_internal_diameter();
  uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    total_size += 1 + 4;
  }

  // float reflectorDiameter = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectordiameter = this->_internal_reflectordiameter();
  uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    total_size += 1 + 4;
  }

  // float reflectorMaxDepth = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = this->_internal_reflectormaxdepth();
  uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    total_size += 1 + 4;
  }

  // float equivalent = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AVG::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AVG::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AVG::GetClassData() const { return &_class_data_; }


void AVG::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AVG*>(&to_msg);
  auto& from = static_cast<const AVG&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AVG)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_internal_set_basegain(from._internal_basegain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_internal_set_compensatinggain(from._internal_compensatinggain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = from._internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    _this->_internal_set_scangain(from._internal_scangain());
  }
  if (from._internal_issubline() != 0) {
    _this->_internal_set_issubline(from._internal_issubline());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = from._internal_samplingxaxisbias();
  uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    _this->_internal_set_samplingxaxisbias(from._internal_samplingxaxisbias());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplingxaxislen = from._internal_samplingxaxislen();
  uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    _this->_internal_set_samplingxaxislen(from._internal_samplingxaxislen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diameter = from._internal_diameter();
  uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    _this->_internal_set_diameter(from._internal_diameter());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectordiameter = from._internal_reflectordiameter();
  uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    _this->_internal_set_reflectordiameter(from._internal_reflectordiameter());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = from._internal_reflectormaxdepth();
  uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    _this->_internal_set_reflectormaxdepth(from._internal_reflectormaxdepth());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_equivalent = from._internal_equivalent();
  uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    _this->_internal_set_equivalent(from._internal_equivalent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AVG::CopyFrom(const AVG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AVG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVG::IsInitialized() const {
  return true;
}

void AVG::InternalSwap(AVG* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVG, _impl_.equivalent_)
      + sizeof(AVG::_impl_.equivalent_)
      - PROTOBUF_FIELD_OFFSET(AVG, _impl_.basegain_)>(
          reinterpret_cast<char*>(&_impl_.basegain_),
          reinterpret_cast<char*>(&other->_impl_.basegain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AVG::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[4]);
}

// ===================================================================

class InstrumentParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentParameter>()._impl_._has_bits_);
  static const ::Union::AScan::Proto::Performance& performance(const InstrumentParameter* msg);
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Union::AScan::Proto::Performance&
InstrumentParameter::_Internal::performance(const InstrumentParameter* msg) {
  return *msg->_impl_.performance_;
}
InstrumentParameter::InstrumentParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.InstrumentParameter)
}
InstrumentParameter::InstrumentParameter(const InstrumentParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstrumentParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.probe_){}
    , decltype(_impl_.probefrequence_){}
    , decltype(_impl_.probechipshapel_){}
    , decltype(_impl_.probechipshapeh_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.soundvelocity_){}
    , decltype(_impl_.probefrontdistance_){}
    , decltype(_impl_.zeropoint_){}
    , decltype(_impl_.channel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_performance()) {
    _this->_impl_.performance_ = new ::Union::AScan::Proto::Performance(*from._impl_.performance_);
  }
  ::memcpy(&_impl_.probe_, &from._impl_.probe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.probe_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.InstrumentParameter)
}

inline void InstrumentParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.probe_){0}
    , decltype(_impl_.probefrequence_){0}
    , decltype(_impl_.probechipshapel_){0}
    , decltype(_impl_.probechipshapeh_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.soundvelocity_){0}
    , decltype(_impl_.probefrontdistance_){0}
    , decltype(_impl_.zeropoint_){0}
    , decltype(_impl_.channel_){0}
  };
}

InstrumentParameter::~InstrumentParameter() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.InstrumentParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstrumentParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.performance_;
}

void InstrumentParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstrumentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.InstrumentParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.performance_ != nullptr);
    _impl_.performance_->Clear();
  }
  ::memset(&_impl_.probe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.probe_)) + sizeof(_impl_.channel_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Union.AScan.Proto.Probe probe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_probe(static_cast<::Union::AScan::Proto::Probe>(val));
        } else
          goto handle_unusual;
        continue;
      // float probeFrequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.probefrequence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float probeChipShapeL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.probechipshapel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float probeChipShapeH = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.probechipshapeh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float soundVelocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.soundvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float probeFrontDistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.probefrontdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float zeroPoint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.zeropoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Union.AScan.Proto.Performance performance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.InstrumentParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Union.AScan.Proto.Probe probe = 3;
  if (this->_internal_probe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_probe(), target);
  }

  // float probeFrequence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrequence = this->_internal_probefrequence();
  uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_probefrequence(), target);
  }

  // float probeChipShapeL = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapel = this->_internal_probechipshapel();
  uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_probechipshapel(), target);
  }

  // float probeChipShapeH = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapeh = this->_internal_probechipshapeh();
  uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_probechipshapeh(), target);
  }

  // float angle = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_angle(), target);
  }

  // float soundVelocity = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_soundvelocity = this->_internal_soundvelocity();
  uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_soundvelocity(), target);
  }

  // float probeFrontDistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrontdistance = this->_internal_probefrontdistance();
  uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_probefrontdistance(), target);
  }

  // float zeroPoint = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zeropoint = this->_internal_zeropoint();
  uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_zeropoint(), target);
  }

  // int32 channel = 11;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_channel(), target);
  }

  // optional .Union.AScan.Proto.Performance performance = 12;
  if (_internal_has_performance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::performance(this),
        _Internal::performance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.InstrumentParameter)
  return target;
}

size_t InstrumentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.InstrumentParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Union.AScan.Proto.Performance performance = 12;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.performance_);
  }

  // .Union.AScan.Proto.Probe probe = 3;
  if (this->_internal_probe() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_probe());
  }

  // float probeFrequence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrequence = this->_internal_probefrequence();
  uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    total_size += 1 + 4;
  }

  // float probeChipShapeL = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapel = this->_internal_probechipshapel();
  uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    total_size += 1 + 4;
  }

  // float probeChipShapeH = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapeh = this->_internal_probechipshapeh();
  uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    total_size += 1 + 4;
  }

  // float angle = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  // float soundVelocity = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_soundvelocity = this->_internal_soundvelocity();
  uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    total_size += 1 + 4;
  }

  // float probeFrontDistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrontdistance = this->_internal_probefrontdistance();
  uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    total_size += 1 + 4;
  }

  // float zeroPoint = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zeropoint = this->_internal_zeropoint();
  uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    total_size += 1 + 4;
  }

  // int32 channel = 11;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstrumentParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentParameter::GetClassData() const { return &_class_data_; }


void InstrumentParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstrumentParameter*>(&to_msg);
  auto& from = static_cast<const InstrumentParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.InstrumentParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_performance()) {
    _this->_internal_mutable_performance()->::Union::AScan::Proto::Performance::MergeFrom(
        from._internal_performance());
  }
  if (from._internal_probe() != 0) {
    _this->_internal_set_probe(from._internal_probe());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrequence = from._internal_probefrequence();
  uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    _this->_internal_set_probefrequence(from._internal_probefrequence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapel = from._internal_probechipshapel();
  uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    _this->_internal_set_probechipshapel(from._internal_probechipshapel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probechipshapeh = from._internal_probechipshapeh();
  uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    _this->_internal_set_probechipshapeh(from._internal_probechipshapeh());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_soundvelocity = from._internal_soundvelocity();
  uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    _this->_internal_set_soundvelocity(from._internal_soundvelocity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_probefrontdistance = from._internal_probefrontdistance();
  uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    _this->_internal_set_probefrontdistance(from._internal_probefrontdistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zeropoint = from._internal_zeropoint();
  uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    _this->_internal_set_zeropoint(from._internal_zeropoint());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentParameter::CopyFrom(const InstrumentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.InstrumentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentParameter::IsInitialized() const {
  return true;
}

void InstrumentParameter::InternalSwap(InstrumentParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.channel_)
      + sizeof(InstrumentParameter::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.performance_)>(
          reinterpret_cast<char*>(&_impl_.performance_),
          reinterpret_cast<char*>(&other->_impl_.performance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[5]);
}

// ===================================================================

class ChannelParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelParameter>()._impl_._has_bits_);
  static const ::Union::AScan::Proto::DAC& dac(const ChannelParameter* msg);
  static void set_has_dac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Union::AScan::Proto::AVG& avg(const ChannelParameter* msg);
  static void set_has_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Union::AScan::Proto::Performance& performance(const ChannelParameter* msg);
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Union::AScan::Proto::DAC&
ChannelParameter::_Internal::dac(const ChannelParameter* msg) {
  return *msg->_impl_.dac_;
}
const ::Union::AScan::Proto::AVG&
ChannelParameter::_Internal::avg(const ChannelParameter* msg) {
  return *msg->_impl_.avg_;
}
const ::Union::AScan::Proto::Performance&
ChannelParameter::_Internal::performance(const ChannelParameter* msg) {
  return *msg->_impl_.performance_;
}
ChannelParameter::ChannelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.ChannelParameter)
}
ChannelParameter::ChannelParameter(const ChannelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gate_){from._impl_.gate_}
    , decltype(_impl_.ascan_){}
    , decltype(_impl_.dac_){nullptr}
    , decltype(_impl_.avg_){nullptr}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.axisbias_){}
    , decltype(_impl_.axislen_){}
    , decltype(_impl_.basegain_){}
    , decltype(_impl_.scangain_){}
    , decltype(_impl_.compensatinggain_){}
    , decltype(_impl_.suppression_){}
    , decltype(_impl_.distancemode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ascan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ascan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ascan().empty()) {
    _this->_impl_.ascan_.Set(from._internal_ascan(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dac()) {
    _this->_impl_.dac_ = new ::Union::AScan::Proto::DAC(*from._impl_.dac_);
  }
  if (from._internal_has_avg()) {
    _this->_impl_.avg_ = new ::Union::AScan::Proto::AVG(*from._impl_.avg_);
  }
  if (from._internal_has_performance()) {
    _this->_impl_.performance_ = new ::Union::AScan::Proto::Performance(*from._impl_.performance_);
  }
  ::memcpy(&_impl_.axisbias_, &from._impl_.axisbias_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distancemode_) -
    reinterpret_cast<char*>(&_impl_.axisbias_)) + sizeof(_impl_.distancemode_));
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.ChannelParameter)
}

inline void ChannelParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gate_){arena}
    , decltype(_impl_.ascan_){}
    , decltype(_impl_.dac_){nullptr}
    , decltype(_impl_.avg_){nullptr}
    , decltype(_impl_.performance_){nullptr}
    , decltype(_impl_.axisbias_){0}
    , decltype(_impl_.axislen_){0}
    , decltype(_impl_.basegain_){0}
    , decltype(_impl_.scangain_){0}
    , decltype(_impl_.compensatinggain_){0}
    , decltype(_impl_.suppression_){0}
    , decltype(_impl_.distancemode_){0}
  };
  _impl_.ascan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ascan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelParameter::~ChannelParameter() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.ChannelParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gate_.~RepeatedPtrField();
  _impl_.ascan_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dac_;
  if (this != internal_default_instance()) delete _impl_.avg_;
  if (this != internal_default_instance()) delete _impl_.performance_;
}

void ChannelParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.ChannelParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gate_.Clear();
  _impl_.ascan_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.dac_ != nullptr);
      _impl_.dac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.avg_ != nullptr);
      _impl_.avg_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.performance_ != nullptr);
      _impl_.performance_->Clear();
    }
  }
  ::memset(&_impl_.axisbias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distancemode_) -
      reinterpret_cast<char*>(&_impl_.axisbias_)) + sizeof(_impl_.distancemode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Union.AScan.Proto.Gate gate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes ascan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ascan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float axisBias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.axisbias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float axisLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.axislen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float baseGain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.basegain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scanGain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.scangain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float compensatingGain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.compensatinggain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 suppression = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.suppression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Union.AScan.Proto.DistanceMode distanceMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_distancemode(static_cast<::Union::AScan::Proto::DistanceMode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .Union.AScan.Proto.DAC dac = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dac(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Union.AScan.Proto.AVG avg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_avg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Union.AScan.Proto.Performance performance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.ChannelParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Union.AScan.Proto.Gate gate = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gate_size()); i < n; i++) {
    const auto& repfield = this->_internal_gate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes ascan = 2;
  if (!this->_internal_ascan().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ascan(), target);
  }

  // float axisBias = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axisbias = this->_internal_axisbias();
  uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_axisbias(), target);
  }

  // float axisLen = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axislen = this->_internal_axislen();
  uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_axislen(), target);
  }

  // float baseGain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_basegain(), target);
  }

  // float scanGain = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_scangain(), target);
  }

  // float compensatingGain = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_compensatinggain(), target);
  }

  // int32 suppression = 8;
  if (this->_internal_suppression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_suppression(), target);
  }

  // .Union.AScan.Proto.DistanceMode distanceMode = 9;
  if (this->_internal_distancemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_distancemode(), target);
  }

  // optional .Union.AScan.Proto.DAC dac = 10;
  if (_internal_has_dac()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dac(this),
        _Internal::dac(this).GetCachedSize(), target, stream);
  }

  // optional .Union.AScan.Proto.AVG avg = 11;
  if (_internal_has_avg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::avg(this),
        _Internal::avg(this).GetCachedSize(), target, stream);
  }

  // optional .Union.AScan.Proto.Performance performance = 12;
  if (_internal_has_performance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::performance(this),
        _Internal::performance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.ChannelParameter)
  return target;
}

size_t ChannelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.ChannelParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Union.AScan.Proto.Gate gate = 1;
  total_size += 1UL * this->_internal_gate_size();
  for (const auto& msg : this->_impl_.gate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ascan = 2;
  if (!this->_internal_ascan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ascan());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Union.AScan.Proto.DAC dac = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dac_);
    }

    // optional .Union.AScan.Proto.AVG avg = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.avg_);
    }

    // optional .Union.AScan.Proto.Performance performance = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.performance_);
    }

  }
  // float axisBias = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axisbias = this->_internal_axisbias();
  uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    total_size += 1 + 4;
  }

  // float axisLen = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axislen = this->_internal_axislen();
  uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    total_size += 1 + 4;
  }

  // float baseGain = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 1 + 4;
  }

  // float scanGain = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    total_size += 1 + 4;
  }

  // float compensatingGain = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 1 + 4;
  }

  // int32 suppression = 8;
  if (this->_internal_suppression() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_suppression());
  }

  // .Union.AScan.Proto.DistanceMode distanceMode = 9;
  if (this->_internal_distancemode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_distancemode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelParameter::GetClassData() const { return &_class_data_; }


void ChannelParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelParameter*>(&to_msg);
  auto& from = static_cast<const ChannelParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.ChannelParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gate_.MergeFrom(from._impl_.gate_);
  if (!from._internal_ascan().empty()) {
    _this->_internal_set_ascan(from._internal_ascan());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dac()->::Union::AScan::Proto::DAC::MergeFrom(
          from._internal_dac());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_avg()->::Union::AScan::Proto::AVG::MergeFrom(
          from._internal_avg());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_performance()->::Union::AScan::Proto::Performance::MergeFrom(
          from._internal_performance());
    }
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axisbias = from._internal_axisbias();
  uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    _this->_internal_set_axisbias(from._internal_axisbias());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_axislen = from._internal_axislen();
  uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    _this->_internal_set_axislen(from._internal_axislen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_internal_set_basegain(from._internal_basegain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scangain = from._internal_scangain();
  uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    _this->_internal_set_scangain(from._internal_scangain());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_internal_set_compensatinggain(from._internal_compensatinggain());
  }
  if (from._internal_suppression() != 0) {
    _this->_internal_set_suppression(from._internal_suppression());
  }
  if (from._internal_distancemode() != 0) {
    _this->_internal_set_distancemode(from._internal_distancemode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelParameter::CopyFrom(const ChannelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.ChannelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelParameter::IsInitialized() const {
  return true;
}

void ChannelParameter::InternalSwap(ChannelParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gate_.InternalSwap(&other->_impl_.gate_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ascan_, lhs_arena,
      &other->_impl_.ascan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.distancemode_)
      + sizeof(ChannelParameter::_impl_.distancemode_)
      - PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.dac_)>(
          reinterpret_cast<char*>(&_impl_.dac_),
          reinterpret_cast<char*>(&other->_impl_.dac_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[6]);
}

// ===================================================================

class AScanPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<AScanPayload>()._impl_._has_bits_);
  static const ::Union::AScan::Proto::InstrumentParameter& instrumentparameter(const AScanPayload* msg);
  static const ::Union::AScan::Proto::ChannelParameter& channelparameter(const AScanPayload* msg);
  static void set_has_cameradata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Union::AScan::Proto::InstrumentParameter&
AScanPayload::_Internal::instrumentparameter(const AScanPayload* msg) {
  return *msg->_impl_.instrumentparameter_;
}
const ::Union::AScan::Proto::ChannelParameter&
AScanPayload::_Internal::channelparameter(const AScanPayload* msg) {
  return *msg->_impl_.channelparameter_;
}
AScanPayload::AScanPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AScanPayload)
}
AScanPayload::AScanPayload(const AScanPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AScanPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameradata_){}
    , decltype(_impl_.instrumentparameter_){nullptr}
    , decltype(_impl_.channelparameter_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cameradata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameradata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cameradata()) {
    _this->_impl_.cameradata_.Set(from._internal_cameradata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instrumentparameter()) {
    _this->_impl_.instrumentparameter_ = new ::Union::AScan::Proto::InstrumentParameter(*from._impl_.instrumentparameter_);
  }
  if (from._internal_has_channelparameter()) {
    _this->_impl_.channelparameter_ = new ::Union::AScan::Proto::ChannelParameter(*from._impl_.channelparameter_);
  }
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AScanPayload)
}

inline void AScanPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameradata_){}
    , decltype(_impl_.instrumentparameter_){nullptr}
    , decltype(_impl_.channelparameter_){nullptr}
  };
  _impl_.cameradata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameradata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AScanPayload::~AScanPayload() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AScanPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AScanPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cameradata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instrumentparameter_;
  if (this != internal_default_instance()) delete _impl_.channelparameter_;
}

void AScanPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AScanPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AScanPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.cameradata_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.instrumentparameter_ != nullptr) {
    delete _impl_.instrumentparameter_;
  }
  _impl_.instrumentparameter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.channelparameter_ != nullptr) {
    delete _impl_.channelparameter_;
  }
  _impl_.channelparameter_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AScanPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentparameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelparameter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cameraData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cameradata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AScanPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AScanPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
  if (this->_internal_has_instrumentparameter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrumentparameter(this),
        _Internal::instrumentparameter(this).GetCachedSize(), target, stream);
  }

  // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
  if (this->_internal_has_channelparameter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channelparameter(this),
        _Internal::channelparameter(this).GetCachedSize(), target, stream);
  }

  // optional bytes cameraData = 3;
  if (_internal_has_cameradata()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cameradata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AScanPayload)
  return target;
}

size_t AScanPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AScanPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes cameraData = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameradata());
  }

  // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
  if (this->_internal_has_instrumentparameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrumentparameter_);
  }

  // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
  if (this->_internal_has_channelparameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.channelparameter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AScanPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AScanPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AScanPayload::GetClassData() const { return &_class_data_; }


void AScanPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AScanPayload*>(&to_msg);
  auto& from = static_cast<const AScanPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AScanPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cameradata()) {
    _this->_internal_set_cameradata(from._internal_cameradata());
  }
  if (from._internal_has_instrumentparameter()) {
    _this->_internal_mutable_instrumentparameter()->::Union::AScan::Proto::InstrumentParameter::MergeFrom(
        from._internal_instrumentparameter());
  }
  if (from._internal_has_channelparameter()) {
    _this->_internal_mutable_channelparameter()->::Union::AScan::Proto::ChannelParameter::MergeFrom(
        from._internal_channelparameter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AScanPayload::CopyFrom(const AScanPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AScanPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AScanPayload::IsInitialized() const {
  return true;
}

void AScanPayload::InternalSwap(AScanPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameradata_, lhs_arena,
      &other->_impl_.cameradata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.channelparameter_)
      + sizeof(AScanPayload::_impl_.channelparameter_)
      - PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.instrumentparameter_)>(
          reinterpret_cast<char*>(&_impl_.instrumentparameter_),
          reinterpret_cast<char*>(&other->_impl_.instrumentparameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AScanPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[7]);
}

// ===================================================================

class AScanHead::_Internal {
 public:
};

AScanHead::AScanHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AScanHead)
}
AScanHead::AScanHead(const AScanHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AScanHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrumentname_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instrumentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrumentname().empty()) {
    _this->_impl_.instrumentname_.Set(from._internal_instrumentname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AScanHead)
}

inline void AScanHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrumentname_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instrumentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AScanHead::~AScanHead() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AScanHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AScanHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrumentname_.Destroy();
  _impl_.time_.Destroy();
}

void AScanHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AScanHead::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AScanHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrumentname_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AScanHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrumentName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instrumentname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Union.AScan.Proto.AScanHead.instrumentName"));
        } else
          goto handle_unusual;
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Union.AScan.Proto.AScanHead.time"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AScanHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AScanHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentName = 1;
  if (!this->_internal_instrumentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumentname().data(), static_cast<int>(this->_internal_instrumentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Union.AScan.Proto.AScanHead.instrumentName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumentname(), target);
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Union.AScan.Proto.AScanHead.time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AScanHead)
  return target;
}

size_t AScanHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AScanHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrumentName = 1;
  if (!this->_internal_instrumentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumentname());
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AScanHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AScanHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AScanHead::GetClassData() const { return &_class_data_; }


void AScanHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AScanHead*>(&to_msg);
  auto& from = static_cast<const AScanHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AScanHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrumentname().empty()) {
    _this->_internal_set_instrumentname(from._internal_instrumentname());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AScanHead::CopyFrom(const AScanHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AScanHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AScanHead::IsInitialized() const {
  return true;
}

void AScanHead::InternalSwap(AScanHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrumentname_, lhs_arena,
      &other->_impl_.instrumentname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AScanHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[8]);
}

// ===================================================================

class AScanProtoType::_Internal {
 public:
  static const ::Union::AScan::Proto::AScanHead& head(const AScanProtoType* msg);
};

const ::Union::AScan::Proto::AScanHead&
AScanProtoType::_Internal::head(const AScanProtoType* msg) {
  return *msg->_impl_.head_;
}
AScanProtoType::AScanProtoType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AScanProtoType)
}
AScanProtoType::AScanProtoType(const AScanProtoType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AScanProtoType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){from._impl_.payload_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::Union::AScan::Proto::AScanHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AScanProtoType)
}

inline void AScanProtoType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AScanProtoType::~AScanProtoType() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AScanProtoType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AScanProtoType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void AScanProtoType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AScanProtoType::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AScanProtoType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AScanProtoType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Union.AScan.Proto.AScanHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Union.AScan.Proto.AScanPayload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payload(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AScanProtoType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AScanProtoType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Union.AScan.Proto.AScanHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .Union.AScan.Proto.AScanPayload payload = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_payload_size()); i < n; i++) {
    const auto& repfield = this->_internal_payload(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AScanProtoType)
  return target;
}

size_t AScanProtoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AScanProtoType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Union.AScan.Proto.AScanPayload payload = 2;
  total_size += 1UL * this->_internal_payload_size();
  for (const auto& msg : this->_impl_.payload_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Union.AScan.Proto.AScanHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AScanProtoType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AScanProtoType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AScanProtoType::GetClassData() const { return &_class_data_; }


void AScanProtoType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AScanProtoType*>(&to_msg);
  auto& from = static_cast<const AScanProtoType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AScanProtoType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::Union::AScan::Proto::AScanHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AScanProtoType::CopyFrom(const AScanProtoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AScanProtoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AScanProtoType::IsInitialized() const {
  return true;
}

void AScanProtoType::InternalSwap(AScanProtoType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.payload_.InternalSwap(&other->_impl_.payload_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AScanProtoType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AScan_2eproto_getter, &descriptor_table_AScan_2eproto_once,
      file_level_metadata_AScan_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace AScan
}  // namespace Union
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::Performance*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::Performance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::Gate*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::Gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::Gate >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::DACCriteriaBias*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::DACCriteriaBias >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::DACCriteriaBias >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::DAC*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::DAC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::DAC >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::AVG*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::AVG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::AVG >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::InstrumentParameter*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::InstrumentParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::InstrumentParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::ChannelParameter*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::ChannelParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::ChannelParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::AScanPayload*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::AScanPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::AScanPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::AScanHead*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::AScanHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::AScanHead >(arena);
}
template<> PROTOBUF_NOINLINE ::Union::AScan::Proto::AScanProtoType*
Arena::CreateMaybeMessage< ::Union::AScan::Proto::AScanProtoType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Union::AScan::Proto::AScanProtoType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
