// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: AScan.proto
// Protobuf C++ Version: 5.27.1

#include "AScan.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Union {
namespace AScan {
namespace Proto {

inline constexpr Performance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : horizontallinearity_{0},
        verticallinearity_{0},
        resolution_{0},
        dynamicrange_{0},
        surplussensitivity_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Performance::Performance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PerformanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceDefaultTypeInternal() {}
  union {
    Performance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceDefaultTypeInternal _Performance_default_instance_;

inline constexpr Gate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : idx_{0},
        pos_{0},
        width_{0},
        height_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Gate::Gate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GateDefaultTypeInternal() {}
  union {
    Gate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GateDefaultTypeInternal _Gate_default_instance_;

inline constexpr DACCriteriaBias::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rlbias_{0},
        slbias_{0},
        elbias_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DACCriteriaBias::DACCriteriaBias(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DACCriteriaBiasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DACCriteriaBiasDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DACCriteriaBiasDefaultTypeInternal() {}
  union {
    DACCriteriaBias _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DACCriteriaBiasDefaultTypeInternal _DACCriteriaBias_default_instance_;

inline constexpr AVG::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : index_{},
        value_{},
        basegain_{0},
        compensatinggain_{0},
        scangain_{0},
        issubline_{false},
        samplingxaxisbias_{0},
        samplingxaxislen_{0},
        diameter_{0},
        reflectordiameter_{0},
        reflectormaxdepth_{0},
        equivalent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AVG::AVG(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AVGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AVGDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AVGDefaultTypeInternal() {}
  union {
    AVG _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AVGDefaultTypeInternal _AVG_default_instance_;

inline constexpr AScanHead::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrumentname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AScanHead::AScanHead(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AScanHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AScanHeadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AScanHeadDefaultTypeInternal() {}
  union {
    AScanHead _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AScanHeadDefaultTypeInternal _AScanHead_default_instance_;

inline constexpr InstrumentParameter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        performance_{nullptr},
        probe_{static_cast< ::Union::AScan::Proto::Probe >(0)},
        probefrequence_{0},
        probechipshapel_{0},
        probechipshapeh_{0},
        angle_{0},
        soundvelocity_{0},
        probefrontdistance_{0},
        zeropoint_{0},
        channel_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentParameter::InstrumentParameter(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InstrumentParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentParameterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentParameterDefaultTypeInternal() {}
  union {
    InstrumentParameter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentParameterDefaultTypeInternal _InstrumentParameter_default_instance_;

inline constexpr DAC::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        index_{},
        value_{},
        criteriabias_{nullptr},
        basegain_{0},
        compensatinggain_{0},
        equivalent_{0},
        criteria_{static_cast< ::Union::AScan::Proto::DACCriteria >(0)},
        issubline_{false},
        samplingxaxisbias_{0},
        samplingxaxislen_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DAC::DAC(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DACDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DACDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DACDefaultTypeInternal() {}
  union {
    DAC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DACDefaultTypeInternal _DAC_default_instance_;

inline constexpr ChannelParameter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gate_{},
        ascan_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dac_{nullptr},
        avg_{nullptr},
        performance_{nullptr},
        axisbias_{0},
        axislen_{0},
        basegain_{0},
        scangain_{0},
        compensatinggain_{0},
        suppression_{0},
        distancemode_{static_cast< ::Union::AScan::Proto::DistanceMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelParameter::ChannelParameter(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelParameterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelParameterDefaultTypeInternal() {}
  union {
    ChannelParameter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelParameterDefaultTypeInternal _ChannelParameter_default_instance_;

inline constexpr AScanPayload::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cameradata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrumentparameter_{nullptr},
        channelparameter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AScanPayload::AScanPayload(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AScanPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AScanPayloadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AScanPayloadDefaultTypeInternal() {}
  union {
    AScanPayload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AScanPayloadDefaultTypeInternal _AScanPayload_default_instance_;
}  // namespace Proto
}  // namespace AScan
}  // namespace Union
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_AScan_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_AScan_2eproto = nullptr;
const ::uint32_t
    TableStruct_AScan_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.horizontallinearity_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.verticallinearity_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.resolution_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.dynamicrange_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Performance, _impl_.surplussensitivity_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.idx_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.pos_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::Gate, _impl_.height_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.rlbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.slbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DACCriteriaBias, _impl_.elbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.basegain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.compensatinggain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.equivalent_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.criteria_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.criteriabias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.issubline_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.samplingxaxisbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::DAC, _impl_.samplingxaxislen_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.basegain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.compensatinggain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.scangain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.issubline_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.samplingxaxisbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.samplingxaxislen_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.diameter_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.reflectordiameter_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.reflectormaxdepth_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AVG, _impl_.equivalent_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probe_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probefrequence_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probechipshapel_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probechipshapeh_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.angle_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.soundvelocity_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.probefrontdistance_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.zeropoint_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.channel_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::InstrumentParameter, _impl_.performance_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.gate_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.ascan_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.axisbias_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.axislen_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.basegain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.scangain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.compensatinggain_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.suppression_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.distancemode_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.dac_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.avg_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::ChannelParameter, _impl_.performance_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.instrumentparameter_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.channelparameter_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanPayload, _impl_.cameradata_),
        1,
        2,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _impl_.instrumentname_),
        PROTOBUF_FIELD_OFFSET(::Union::AScan::Proto::AScanHead, _impl_.time_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Union::AScan::Proto::Performance)},
        {13, -1, -1, sizeof(::Union::AScan::Proto::Gate)},
        {25, -1, -1, sizeof(::Union::AScan::Proto::DACCriteriaBias)},
        {36, 54, -1, sizeof(::Union::AScan::Proto::DAC)},
        {64, -1, -1, sizeof(::Union::AScan::Proto::AVG)},
        {84, 102, -1, sizeof(::Union::AScan::Proto::InstrumentParameter)},
        {112, 132, -1, sizeof(::Union::AScan::Proto::ChannelParameter)},
        {144, 155, -1, sizeof(::Union::AScan::Proto::AScanPayload)},
        {158, -1, -1, sizeof(::Union::AScan::Proto::AScanHead)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::Union::AScan::Proto::_Performance_default_instance_._instance,
    &::Union::AScan::Proto::_Gate_default_instance_._instance,
    &::Union::AScan::Proto::_DACCriteriaBias_default_instance_._instance,
    &::Union::AScan::Proto::_DAC_default_instance_._instance,
    &::Union::AScan::Proto::_AVG_default_instance_._instance,
    &::Union::AScan::Proto::_InstrumentParameter_default_instance_._instance,
    &::Union::AScan::Proto::_ChannelParameter_default_instance_._instance,
    &::Union::AScan::Proto::_AScanPayload_default_instance_._instance,
    &::Union::AScan::Proto::_AScanHead_default_instance_._instance,
};
const char descriptor_table_protodef_AScan_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013AScan.proto\022\021Union.AScan.Proto\"\213\001\n\013Per"
    "formance\022\033\n\023horizontalLinearity\030\001 \001(\002\022\031\n"
    "\021verticalLinearity\030\002 \001(\002\022\022\n\nresolution\030\003"
    " \001(\002\022\024\n\014dynamicRange\030\004 \001(\002\022\032\n\022surplusSen"
    "sitivity\030\005 \001(\002\"\?\n\004Gate\022\013\n\003idx\030\001 \001(\005\022\013\n\003p"
    "os\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\""
    "A\n\017DACCriteriaBias\022\016\n\006rlBias\030\001 \001(\021\022\016\n\006sl"
    "Bias\030\002 \001(\021\022\016\n\006elBias\030\003 \001(\021\"\255\002\n\003DAC\022\020\n\010ba"
    "seGain\030\001 \001(\002\022\030\n\020compensatingGain\030\002 \001(\002\022\r"
    "\n\005index\030\003 \003(\002\022\r\n\005value\030\004 \003(\002\022\022\n\nequivale"
    "nt\030\005 \001(\002\0220\n\010criteria\030\006 \001(\0162\036.Union.AScan"
    ".Proto.DACCriteria\022=\n\014criteriaBias\030\007 \001(\013"
    "2\".Union.AScan.Proto.DACCriteriaBiasH\000\210\001"
    "\001\022\021\n\tisSubLine\030\010 \001(\010\022\031\n\021samplingXAxisBia"
    "s\030\t \001(\002\022\030\n\020samplingXAxisLen\030\n \001(\002B\017\n\r_cr"
    "iteriaBias\"\205\002\n\003AVG\022\020\n\010baseGain\030\001 \001(\002\022\030\n\020"
    "compensatingGain\030\002 \001(\002\022\020\n\010scanGain\030\003 \001(\002"
    "\022\r\n\005index\030\004 \003(\002\022\r\n\005value\030\005 \003(\002\022\021\n\tisSubL"
    "ine\030\006 \001(\010\022\031\n\021samplingXAxisBias\030\007 \001(\002\022\030\n\020"
    "samplingXAxisLen\030\010 \001(\002\022\020\n\010diameter\030\t \001(\002"
    "\022\031\n\021reflectorDiameter\030\n \001(\002\022\031\n\021reflector"
    "MaxDepth\030\013 \001(\002\022\022\n\nequivalent\030\014 \001(\002\"\270\002\n\023I"
    "nstrumentParameter\022\'\n\005probe\030\003 \001(\0162\030.Unio"
    "n.AScan.Proto.Probe\022\026\n\016probeFrequence\030\004 "
    "\001(\002\022\027\n\017probeChipShapeL\030\005 \001(\002\022\027\n\017probeChi"
    "pShapeH\030\006 \001(\002\022\r\n\005angle\030\007 \001(\002\022\025\n\rsoundVel"
    "ocity\030\010 \001(\002\022\032\n\022probeFrontDistance\030\t \001(\002\022"
    "\021\n\tzeroPoint\030\n \001(\002\022\017\n\007channel\030\013 \001(\005\0228\n\013p"
    "erformance\030\014 \001(\0132\036.Union.AScan.Proto.Per"
    "formanceH\000\210\001\001B\016\n\014_performance\"\243\003\n\020Channe"
    "lParameter\022%\n\004gate\030\001 \003(\0132\027.Union.AScan.P"
    "roto.Gate\022\r\n\005ascan\030\002 \001(\014\022\020\n\010axisBias\030\003 \001"
    "(\002\022\017\n\007axisLen\030\004 \001(\002\022\020\n\010baseGain\030\005 \001(\002\022\020\n"
    "\010scanGain\030\006 \001(\002\022\030\n\020compensatingGain\030\007 \001("
    "\002\022\023\n\013suppression\030\010 \001(\005\0225\n\014distanceMode\030\t"
    " \001(\0162\037.Union.AScan.Proto.DistanceMode\022(\n"
    "\003dac\030\n \001(\0132\026.Union.AScan.Proto.DACH\000\210\001\001\022"
    "(\n\003avg\030\013 \001(\0132\026.Union.AScan.Proto.AVGH\001\210\001"
    "\001\0228\n\013performance\030\014 \001(\0132\036.Union.AScan.Pro"
    "to.PerformanceH\002\210\001\001B\006\n\004_dacB\006\n\004_avgB\016\n\014_"
    "performance\"\272\001\n\014AScanPayload\022C\n\023instrume"
    "ntParameter\030\001 \001(\0132&.Union.AScan.Proto.In"
    "strumentParameter\022=\n\020channelParameter\030\002 "
    "\001(\0132#.Union.AScan.Proto.ChannelParameter"
    "\022\027\n\ncameraData\030\003 \001(\014H\000\210\001\001B\r\n\013_cameraData"
    "\"1\n\tAScanHead\022\026\n\016instrumentName\030\001 \001(\t\022\014\n"
    "\004time\030\002 \001(\t*\230\001\n\005Probe\022\017\n\013NormalProbe\020\000\022\020"
    "\n\014ObliqueProbe\020\001\022*\n&TwinCrystalLongitudi"
    "nalWaveNormalprobe\020\002\022\024\n\020PenetrationProbe"
    "\020\003\022*\n&TwinCrystaLongitudinalWaveObliqueP"
    "robe\020\004*/\n\013DACCriteria\022\010\n\004None\020\000\022\006\n\002RL\020\001\022"
    "\006\n\002SL\020\002\022\006\n\002EL\020\003*#\n\014DistanceMode\022\005\n\001Y\020\000\022\005"
    "\n\001X\020\001\022\005\n\001S\020\002b\006proto3"
};
static ::absl::once_flag descriptor_table_AScan_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_AScan_2eproto = {
    false,
    false,
    2100,
    descriptor_table_protodef_AScan_2eproto,
    "AScan.proto",
    &descriptor_table_AScan_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_AScan_2eproto::offsets,
    file_level_enum_descriptors_AScan_2eproto,
    file_level_service_descriptors_AScan_2eproto,
};
namespace Union {
namespace AScan {
namespace Proto {
const ::google::protobuf::EnumDescriptor* Probe_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Probe_internal_data_[] = {
    327680u, 0u, };
bool Probe_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* DACCriteria_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t DACCriteria_internal_data_[] = {
    262144u, 0u, };
bool DACCriteria_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* DistanceMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_AScan_2eproto);
  return file_level_enum_descriptors_AScan_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t DistanceMode_internal_data_[] = {
    196608u, 0u, };
bool DistanceMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.Performance)
}
Performance::Performance(
    ::google::protobuf::Arena* arena, const Performance& from)
    : Performance(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Performance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Performance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, horizontallinearity_),
           0,
           offsetof(Impl_, surplussensitivity_) -
               offsetof(Impl_, horizontallinearity_) +
               sizeof(Impl_::surplussensitivity_));
}
Performance::~Performance() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.Performance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Performance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Performance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Performance, _impl_._cached_size_),
              false,
          },
          &Performance::MergeImpl,
          &Performance::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Performance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Performance_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::Performance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float horizontalLinearity = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Performance, _impl_.horizontallinearity_)}},
    // float verticalLinearity = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Performance, _impl_.verticallinearity_)}},
    // float resolution = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Performance, _impl_.resolution_)}},
    // float dynamicRange = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Performance, _impl_.dynamicrange_)}},
    // float surplusSensitivity = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Performance, _impl_.surplussensitivity_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float horizontalLinearity = 1;
    {PROTOBUF_FIELD_OFFSET(Performance, _impl_.horizontallinearity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float verticalLinearity = 2;
    {PROTOBUF_FIELD_OFFSET(Performance, _impl_.verticallinearity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float resolution = 3;
    {PROTOBUF_FIELD_OFFSET(Performance, _impl_.resolution_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dynamicRange = 4;
    {PROTOBUF_FIELD_OFFSET(Performance, _impl_.dynamicrange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float surplusSensitivity = 5;
    {PROTOBUF_FIELD_OFFSET(Performance, _impl_.surplussensitivity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.Performance)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.horizontallinearity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.surplussensitivity_) -
      reinterpret_cast<char*>(&_impl_.horizontallinearity_)) + sizeof(_impl_.surplussensitivity_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Performance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.Performance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float horizontalLinearity = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontallinearity = this->_internal_horizontallinearity();
  ::uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_horizontallinearity(), target);
  }

  // float verticalLinearity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_verticallinearity = this->_internal_verticallinearity();
  ::uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_verticallinearity(), target);
  }

  // float resolution = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  ::uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_resolution(), target);
  }

  // float dynamicRange = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dynamicrange = this->_internal_dynamicrange();
  ::uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_dynamicrange(), target);
  }

  // float surplusSensitivity = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_surplussensitivity = this->_internal_surplussensitivity();
  ::uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_surplussensitivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.Performance)
  return target;
}

::size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.Performance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // float horizontalLinearity = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontallinearity = this->_internal_horizontallinearity();
  ::uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    total_size += 5;
  }

  // float verticalLinearity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_verticallinearity = this->_internal_verticallinearity();
  ::uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    total_size += 5;
  }

  // float resolution = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  ::uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 5;
  }

  // float dynamicRange = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dynamicrange = this->_internal_dynamicrange();
  ::uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    total_size += 5;
  }

  // float surplusSensitivity = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_surplussensitivity = this->_internal_surplussensitivity();
  ::uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Performance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Performance*>(&to_msg);
  auto& from = static_cast<const Performance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.Performance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontallinearity = from._internal_horizontallinearity();
  ::uint32_t raw_horizontallinearity;
  memcpy(&raw_horizontallinearity, &tmp_horizontallinearity, sizeof(tmp_horizontallinearity));
  if (raw_horizontallinearity != 0) {
    _this->_impl_.horizontallinearity_ = from._impl_.horizontallinearity_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_verticallinearity = from._internal_verticallinearity();
  ::uint32_t raw_verticallinearity;
  memcpy(&raw_verticallinearity, &tmp_verticallinearity, sizeof(tmp_verticallinearity));
  if (raw_verticallinearity != 0) {
    _this->_impl_.verticallinearity_ = from._impl_.verticallinearity_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_resolution = from._internal_resolution();
  ::uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_impl_.resolution_ = from._impl_.resolution_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dynamicrange = from._internal_dynamicrange();
  ::uint32_t raw_dynamicrange;
  memcpy(&raw_dynamicrange, &tmp_dynamicrange, sizeof(tmp_dynamicrange));
  if (raw_dynamicrange != 0) {
    _this->_impl_.dynamicrange_ = from._impl_.dynamicrange_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_surplussensitivity = from._internal_surplussensitivity();
  ::uint32_t raw_surplussensitivity;
  memcpy(&raw_surplussensitivity, &tmp_surplussensitivity, sizeof(tmp_surplussensitivity));
  if (raw_surplussensitivity != 0) {
    _this->_impl_.surplussensitivity_ = from._impl_.surplussensitivity_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Performance::InternalSwap(Performance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Performance, _impl_.surplussensitivity_)
      + sizeof(Performance::_impl_.surplussensitivity_)
      - PROTOBUF_FIELD_OFFSET(Performance, _impl_.horizontallinearity_)>(
          reinterpret_cast<char*>(&_impl_.horizontallinearity_),
          reinterpret_cast<char*>(&other->_impl_.horizontallinearity_));
}

::google::protobuf::Metadata Performance::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Gate::_Internal {
 public:
};

Gate::Gate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.Gate)
}
Gate::Gate(
    ::google::protobuf::Arena* arena, const Gate& from)
    : Gate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Gate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Gate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, idx_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, idx_) +
               sizeof(Impl_::height_));
}
Gate::~Gate() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.Gate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Gate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Gate::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Gate, _impl_._cached_size_),
              false,
          },
          &Gate::MergeImpl,
          &Gate::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Gate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Gate_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::Gate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float height = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Gate, _impl_.height_)}},
    // int32 idx = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gate, _impl_.idx_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Gate, _impl_.idx_)}},
    // float pos = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Gate, _impl_.pos_)}},
    // float width = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Gate, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 idx = 1;
    {PROTOBUF_FIELD_OFFSET(Gate, _impl_.idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float pos = 2;
    {PROTOBUF_FIELD_OFFSET(Gate, _impl_.pos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float width = 3;
    {PROTOBUF_FIELD_OFFSET(Gate, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 4;
    {PROTOBUF_FIELD_OFFSET(Gate, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.Gate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.idx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Gate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.Gate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_idx(), target);
  }

  // float pos = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pos = this->_internal_pos();
  ::uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pos(), target);
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.Gate)
  return target;
}

::size_t Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.Gate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_idx());
  }

  // float pos = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pos = this->_internal_pos();
  ::uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    total_size += 5;
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Gate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Gate*>(&to_msg);
  auto& from = static_cast<const Gate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.Gate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idx() != 0) {
    _this->_impl_.idx_ = from._impl_.idx_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pos = from._internal_pos();
  ::uint32_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    _this->_impl_.pos_ = from._impl_.pos_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Gate::CopyFrom(const Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Gate::InternalSwap(Gate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gate, _impl_.height_)
      + sizeof(Gate::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Gate, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::google::protobuf::Metadata Gate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DACCriteriaBias::_Internal {
 public:
};

DACCriteriaBias::DACCriteriaBias(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.DACCriteriaBias)
}
DACCriteriaBias::DACCriteriaBias(
    ::google::protobuf::Arena* arena, const DACCriteriaBias& from)
    : DACCriteriaBias(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DACCriteriaBias::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DACCriteriaBias::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rlbias_),
           0,
           offsetof(Impl_, elbias_) -
               offsetof(Impl_, rlbias_) +
               sizeof(Impl_::elbias_));
}
DACCriteriaBias::~DACCriteriaBias() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.DACCriteriaBias)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DACCriteriaBias::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
DACCriteriaBias::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_._cached_size_),
              false,
          },
          &DACCriteriaBias::MergeImpl,
          &DACCriteriaBias::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> DACCriteriaBias::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DACCriteriaBias_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::DACCriteriaBias>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // sint32 rlBias = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.rlbias_)}},
    // sint32 slBias = 2;
    {::_pbi::TcParser::FastZ32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.slbias_)}},
    // sint32 elBias = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.elbias_)}},
  }}, {{
    65535, 65535
  }}, {{
    // sint32 rlBias = 1;
    {PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.rlbias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 slBias = 2;
    {PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.slbias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 elBias = 3;
    {PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.elbias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DACCriteriaBias::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.DACCriteriaBias)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rlbias_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.elbias_) -
      reinterpret_cast<char*>(&_impl_.rlbias_)) + sizeof(_impl_.elbias_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* DACCriteriaBias::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.DACCriteriaBias)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // sint32 rlBias = 1;
  if (this->_internal_rlbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        1, this->_internal_rlbias(), target);
  }

  // sint32 slBias = 2;
  if (this->_internal_slbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        2, this->_internal_slbias(), target);
  }

  // sint32 elBias = 3;
  if (this->_internal_elbias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_elbias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.DACCriteriaBias)
  return target;
}

::size_t DACCriteriaBias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.DACCriteriaBias)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // sint32 rlBias = 1;
  if (this->_internal_rlbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_rlbias());
  }

  // sint32 slBias = 2;
  if (this->_internal_slbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_slbias());
  }

  // sint32 elBias = 3;
  if (this->_internal_elbias() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_elbias());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void DACCriteriaBias::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DACCriteriaBias*>(&to_msg);
  auto& from = static_cast<const DACCriteriaBias&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.DACCriteriaBias)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rlbias() != 0) {
    _this->_impl_.rlbias_ = from._impl_.rlbias_;
  }
  if (from._internal_slbias() != 0) {
    _this->_impl_.slbias_ = from._impl_.slbias_;
  }
  if (from._internal_elbias() != 0) {
    _this->_impl_.elbias_ = from._impl_.elbias_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DACCriteriaBias::CopyFrom(const DACCriteriaBias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.DACCriteriaBias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DACCriteriaBias::InternalSwap(DACCriteriaBias* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.elbias_)
      + sizeof(DACCriteriaBias::_impl_.elbias_)
      - PROTOBUF_FIELD_OFFSET(DACCriteriaBias, _impl_.rlbias_)>(
          reinterpret_cast<char*>(&_impl_.rlbias_),
          reinterpret_cast<char*>(&other->_impl_.rlbias_));
}

::google::protobuf::Metadata DACCriteriaBias::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DAC::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DAC>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DAC, _impl_._has_bits_);
};

DAC::DAC(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.DAC)
}
inline PROTOBUF_NDEBUG_INLINE DAC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::DAC& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        index_{visibility, arena, from.index_},
        value_{visibility, arena, from.value_} {}

DAC::DAC(
    ::google::protobuf::Arena* arena,
    const DAC& from)
    : ::google::protobuf::Message(arena) {
  DAC* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.criteriabias_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::DACCriteriaBias>(
                              arena, *from._impl_.criteriabias_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, basegain_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, basegain_),
           offsetof(Impl_, samplingxaxislen_) -
               offsetof(Impl_, basegain_) +
               sizeof(Impl_::samplingxaxislen_));

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.DAC)
}
inline PROTOBUF_NDEBUG_INLINE DAC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        index_{visibility, arena},
        value_{visibility, arena} {}

inline void DAC::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, criteriabias_),
           0,
           offsetof(Impl_, samplingxaxislen_) -
               offsetof(Impl_, criteriabias_) +
               sizeof(Impl_::samplingxaxislen_));
}
DAC::~DAC() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.DAC)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DAC::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.criteriabias_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
DAC::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(DAC, _impl_._cached_size_),
              false,
          },
          &DAC::MergeImpl,
          &DAC::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> DAC::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DAC, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DAC_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::DAC>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float baseGain = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.basegain_)}},
    // float compensatingGain = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.compensatinggain_)}},
    // repeated float index = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.index_)}},
    // repeated float value = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.value_)}},
    // float equivalent = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.equivalent_)}},
    // .Union.AScan.Proto.DACCriteria criteria = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DAC, _impl_.criteria_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteria_)}},
    // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteriabias_)}},
    // bool isSubLine = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DAC, _impl_.issubline_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.issubline_)}},
    // float samplingXAxisBias = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxisbias_)}},
    // float samplingXAxisLen = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxislen_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float baseGain = 1;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.basegain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float compensatingGain = 2;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.compensatinggain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float index = 3;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float value = 4;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float equivalent = 5;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.equivalent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Union.AScan.Proto.DACCriteria criteria = 6;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteria_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteriabias_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool isSubLine = 8;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.issubline_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float samplingXAxisBias = 9;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxisbias_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float samplingXAxisLen = 10;
    {PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxislen_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::DACCriteriaBias>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DAC::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.DAC)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.value_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.criteriabias_ != nullptr);
    _impl_.criteriabias_->Clear();
  }
  ::memset(&_impl_.basegain_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.samplingxaxislen_) -
      reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.samplingxaxislen_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* DAC::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.DAC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float baseGain = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_basegain(), target);
  }

  // float compensatingGain = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_compensatinggain(), target);
  }

  // repeated float index = 3;
  if (this->_internal_index_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_index(), target);
  }

  // repeated float value = 4;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_value(), target);
  }

  // float equivalent = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_equivalent(), target);
  }

  // .Union.AScan.Proto.DACCriteria criteria = 6;
  if (this->_internal_criteria() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_criteria(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.criteriabias_, _impl_.criteriabias_->GetCachedSize(), target, stream);
  }

  // bool isSubLine = 8;
  if (this->_internal_issubline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_issubline(), target);
  }

  // float samplingXAxisBias = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_samplingxaxisbias(), target);
  }

  // float samplingXAxisLen = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_samplingxaxislen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.DAC)
  return target;
}

::size_t DAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.DAC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated float index = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_index_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float value = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_value_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // optional .Union.AScan.Proto.DACCriteriaBias criteriaBias = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.criteriabias_);
  }

  // float baseGain = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 5;
  }

  // float compensatingGain = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 5;
  }

  // float equivalent = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    total_size += 5;
  }

  // .Union.AScan.Proto.DACCriteria criteria = 6;
  if (this->_internal_criteria() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_criteria());
  }

  // bool isSubLine = 8;
  if (this->_internal_issubline() != 0) {
    total_size += 2;
  }

  // float samplingXAxisBias = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    total_size += 5;
  }

  // float samplingXAxisLen = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void DAC::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DAC*>(&to_msg);
  auto& from = static_cast<const DAC&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.DAC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_index()->MergeFrom(from._internal_index());
  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.criteriabias_ != nullptr);
    if (_this->_impl_.criteriabias_ == nullptr) {
      _this->_impl_.criteriabias_ =
          ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::DACCriteriaBias>(arena, *from._impl_.criteriabias_);
    } else {
      _this->_impl_.criteriabias_->MergeFrom(*from._impl_.criteriabias_);
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_impl_.basegain_ = from._impl_.basegain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_impl_.compensatinggain_ = from._impl_.compensatinggain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = from._internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    _this->_impl_.equivalent_ = from._impl_.equivalent_;
  }
  if (from._internal_criteria() != 0) {
    _this->_impl_.criteria_ = from._impl_.criteria_;
  }
  if (from._internal_issubline() != 0) {
    _this->_impl_.issubline_ = from._impl_.issubline_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = from._internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    _this->_impl_.samplingxaxisbias_ = from._impl_.samplingxaxisbias_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = from._internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    _this->_impl_.samplingxaxislen_ = from._impl_.samplingxaxislen_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DAC::CopyFrom(const DAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.DAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DAC::InternalSwap(DAC* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAC, _impl_.samplingxaxislen_)
      + sizeof(DAC::_impl_.samplingxaxislen_)
      - PROTOBUF_FIELD_OFFSET(DAC, _impl_.criteriabias_)>(
          reinterpret_cast<char*>(&_impl_.criteriabias_),
          reinterpret_cast<char*>(&other->_impl_.criteriabias_));
}

::google::protobuf::Metadata DAC::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AVG::_Internal {
 public:
};

AVG::AVG(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AVG)
}
inline PROTOBUF_NDEBUG_INLINE AVG::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::AVG& from_msg)
      : index_{visibility, arena, from.index_},
        value_{visibility, arena, from.value_},
        _cached_size_{0} {}

AVG::AVG(
    ::google::protobuf::Arena* arena,
    const AVG& from)
    : ::google::protobuf::Message(arena) {
  AVG* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, basegain_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, basegain_),
           offsetof(Impl_, equivalent_) -
               offsetof(Impl_, basegain_) +
               sizeof(Impl_::equivalent_));

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AVG)
}
inline PROTOBUF_NDEBUG_INLINE AVG::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : index_{visibility, arena},
        value_{visibility, arena},
        _cached_size_{0} {}

inline void AVG::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, basegain_),
           0,
           offsetof(Impl_, equivalent_) -
               offsetof(Impl_, basegain_) +
               sizeof(Impl_::equivalent_));
}
AVG::~AVG() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AVG)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AVG::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AVG::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AVG, _impl_._cached_size_),
              false,
          },
          &AVG::MergeImpl,
          &AVG::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2> AVG::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AVG_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::AVG>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float baseGain = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.basegain_)}},
    // float compensatingGain = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.compensatinggain_)}},
    // float scanGain = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.scangain_)}},
    // repeated float index = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.index_)}},
    // repeated float value = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.value_)}},
    // bool isSubLine = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AVG, _impl_.issubline_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.issubline_)}},
    // float samplingXAxisBias = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.samplingxaxisbias_)}},
    // float samplingXAxisLen = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.samplingxaxislen_)}},
    // float diameter = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.diameter_)}},
    // float reflectorDiameter = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.reflectordiameter_)}},
    // float reflectorMaxDepth = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.reflectormaxdepth_)}},
    // float equivalent = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(AVG, _impl_.equivalent_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float baseGain = 1;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.basegain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float compensatingGain = 2;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.compensatinggain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float scanGain = 3;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.scangain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float index = 4;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float value = 5;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // bool isSubLine = 6;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.issubline_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float samplingXAxisBias = 7;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.samplingxaxisbias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float samplingXAxisLen = 8;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.samplingxaxislen_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float diameter = 9;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.diameter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float reflectorDiameter = 10;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.reflectordiameter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float reflectorMaxDepth = 11;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.reflectormaxdepth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float equivalent = 12;
    {PROTOBUF_FIELD_OFFSET(AVG, _impl_.equivalent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AVG::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AVG)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_.Clear();
  _impl_.value_.Clear();
  ::memset(&_impl_.basegain_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.equivalent_) -
      reinterpret_cast<char*>(&_impl_.basegain_)) + sizeof(_impl_.equivalent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AVG::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AVG)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float baseGain = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_basegain(), target);
  }

  // float compensatingGain = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_compensatinggain(), target);
  }

  // float scanGain = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_scangain(), target);
  }

  // repeated float index = 4;
  if (this->_internal_index_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_index(), target);
  }

  // repeated float value = 5;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_value(), target);
  }

  // bool isSubLine = 6;
  if (this->_internal_issubline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_issubline(), target);
  }

  // float samplingXAxisBias = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_samplingxaxisbias(), target);
  }

  // float samplingXAxisLen = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_samplingxaxislen(), target);
  }

  // float diameter = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_diameter = this->_internal_diameter();
  ::uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_diameter(), target);
  }

  // float reflectorDiameter = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectordiameter = this->_internal_reflectordiameter();
  ::uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_reflectordiameter(), target);
  }

  // float reflectorMaxDepth = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = this->_internal_reflectormaxdepth();
  ::uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_reflectormaxdepth(), target);
  }

  // float equivalent = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_equivalent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AVG)
  return target;
}

::size_t AVG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AVG)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated float index = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_index_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float value = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_value_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float baseGain = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 5;
  }

  // float compensatingGain = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 5;
  }

  // float scanGain = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    total_size += 5;
  }

  // bool isSubLine = 6;
  if (this->_internal_issubline() != 0) {
    total_size += 2;
  }

  // float samplingXAxisBias = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = this->_internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    total_size += 5;
  }

  // float samplingXAxisLen = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = this->_internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    total_size += 5;
  }

  // float diameter = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_diameter = this->_internal_diameter();
  ::uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    total_size += 5;
  }

  // float reflectorDiameter = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectordiameter = this->_internal_reflectordiameter();
  ::uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    total_size += 5;
  }

  // float reflectorMaxDepth = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = this->_internal_reflectormaxdepth();
  ::uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    total_size += 5;
  }

  // float equivalent = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = this->_internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AVG::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AVG*>(&to_msg);
  auto& from = static_cast<const AVG&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AVG)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_index()->MergeFrom(from._internal_index());
  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_impl_.basegain_ = from._impl_.basegain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_impl_.compensatinggain_ = from._impl_.compensatinggain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = from._internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    _this->_impl_.scangain_ = from._impl_.scangain_;
  }
  if (from._internal_issubline() != 0) {
    _this->_impl_.issubline_ = from._impl_.issubline_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxisbias = from._internal_samplingxaxisbias();
  ::uint32_t raw_samplingxaxisbias;
  memcpy(&raw_samplingxaxisbias, &tmp_samplingxaxisbias, sizeof(tmp_samplingxaxisbias));
  if (raw_samplingxaxisbias != 0) {
    _this->_impl_.samplingxaxisbias_ = from._impl_.samplingxaxisbias_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_samplingxaxislen = from._internal_samplingxaxislen();
  ::uint32_t raw_samplingxaxislen;
  memcpy(&raw_samplingxaxislen, &tmp_samplingxaxislen, sizeof(tmp_samplingxaxislen));
  if (raw_samplingxaxislen != 0) {
    _this->_impl_.samplingxaxislen_ = from._impl_.samplingxaxislen_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_diameter = from._internal_diameter();
  ::uint32_t raw_diameter;
  memcpy(&raw_diameter, &tmp_diameter, sizeof(tmp_diameter));
  if (raw_diameter != 0) {
    _this->_impl_.diameter_ = from._impl_.diameter_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectordiameter = from._internal_reflectordiameter();
  ::uint32_t raw_reflectordiameter;
  memcpy(&raw_reflectordiameter, &tmp_reflectordiameter, sizeof(tmp_reflectordiameter));
  if (raw_reflectordiameter != 0) {
    _this->_impl_.reflectordiameter_ = from._impl_.reflectordiameter_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_reflectormaxdepth = from._internal_reflectormaxdepth();
  ::uint32_t raw_reflectormaxdepth;
  memcpy(&raw_reflectormaxdepth, &tmp_reflectormaxdepth, sizeof(tmp_reflectormaxdepth));
  if (raw_reflectormaxdepth != 0) {
    _this->_impl_.reflectormaxdepth_ = from._impl_.reflectormaxdepth_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_equivalent = from._internal_equivalent();
  ::uint32_t raw_equivalent;
  memcpy(&raw_equivalent, &tmp_equivalent, sizeof(tmp_equivalent));
  if (raw_equivalent != 0) {
    _this->_impl_.equivalent_ = from._impl_.equivalent_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AVG::CopyFrom(const AVG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AVG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AVG::InternalSwap(AVG* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVG, _impl_.equivalent_)
      + sizeof(AVG::_impl_.equivalent_)
      - PROTOBUF_FIELD_OFFSET(AVG, _impl_.basegain_)>(
          reinterpret_cast<char*>(&_impl_.basegain_),
          reinterpret_cast<char*>(&other->_impl_.basegain_));
}

::google::protobuf::Metadata AVG::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentParameter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InstrumentParameter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_._has_bits_);
};

InstrumentParameter::InstrumentParameter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.InstrumentParameter)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentParameter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::InstrumentParameter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InstrumentParameter::InstrumentParameter(
    ::google::protobuf::Arena* arena,
    const InstrumentParameter& from)
    : ::google::protobuf::Message(arena) {
  InstrumentParameter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.performance_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::Performance>(
                              arena, *from._impl_.performance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, probe_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, probe_),
           offsetof(Impl_, channel_) -
               offsetof(Impl_, probe_) +
               sizeof(Impl_::channel_));

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.InstrumentParameter)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentParameter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InstrumentParameter::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, performance_),
           0,
           offsetof(Impl_, channel_) -
               offsetof(Impl_, performance_) +
               sizeof(Impl_::channel_));
}
InstrumentParameter::~InstrumentParameter() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.InstrumentParameter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InstrumentParameter::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.performance_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
InstrumentParameter::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_._cached_size_),
              false,
          },
          &InstrumentParameter::MergeImpl,
          &InstrumentParameter::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> InstrumentParameter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963203,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InstrumentParameter_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::InstrumentParameter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .Union.AScan.Proto.Probe probe = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentParameter, _impl_.probe_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probe_)}},
    // float probeFrequence = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probefrequence_)}},
    // float probeChipShapeL = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probechipshapel_)}},
    // float probeChipShapeH = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probechipshapeh_)}},
    // float angle = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.angle_)}},
    // float soundVelocity = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.soundvelocity_)}},
    // float probeFrontDistance = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probefrontdistance_)}},
    // float zeroPoint = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.zeropoint_)}},
    // int32 channel = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentParameter, _impl_.channel_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.channel_)}},
    // optional .Union.AScan.Proto.Performance performance = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.performance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Union.AScan.Proto.Probe probe = 3;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probe_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float probeFrequence = 4;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probefrequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float probeChipShapeL = 5;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probechipshapel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float probeChipShapeH = 6;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probechipshapeh_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle = 7;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float soundVelocity = 8;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.soundvelocity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float probeFrontDistance = 9;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.probefrontdistance_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float zeroPoint = 10;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.zeropoint_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 channel = 11;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.channel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional .Union.AScan.Proto.Performance performance = 12;
    {PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.performance_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::Performance>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InstrumentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.InstrumentParameter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.performance_ != nullptr);
    _impl_.performance_->Clear();
  }
  ::memset(&_impl_.probe_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.probe_)) + sizeof(_impl_.channel_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* InstrumentParameter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.InstrumentParameter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Union.AScan.Proto.Probe probe = 3;
  if (this->_internal_probe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_probe(), target);
  }

  // float probeFrequence = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrequence = this->_internal_probefrequence();
  ::uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_probefrequence(), target);
  }

  // float probeChipShapeL = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapel = this->_internal_probechipshapel();
  ::uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_probechipshapel(), target);
  }

  // float probeChipShapeH = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapeh = this->_internal_probechipshapeh();
  ::uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_probechipshapeh(), target);
  }

  // float angle = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_angle(), target);
  }

  // float soundVelocity = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_soundvelocity = this->_internal_soundvelocity();
  ::uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_soundvelocity(), target);
  }

  // float probeFrontDistance = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrontdistance = this->_internal_probefrontdistance();
  ::uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_probefrontdistance(), target);
  }

  // float zeroPoint = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zeropoint = this->_internal_zeropoint();
  ::uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_zeropoint(), target);
  }

  // int32 channel = 11;
  if (this->_internal_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_channel(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Union.AScan.Proto.Performance performance = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *_impl_.performance_, _impl_.performance_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.InstrumentParameter)
  return target;
}

::size_t InstrumentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.InstrumentParameter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // optional .Union.AScan.Proto.Performance performance = 12;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.performance_);
  }

  // .Union.AScan.Proto.Probe probe = 3;
  if (this->_internal_probe() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_probe());
  }

  // float probeFrequence = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrequence = this->_internal_probefrequence();
  ::uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    total_size += 5;
  }

  // float probeChipShapeL = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapel = this->_internal_probechipshapel();
  ::uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    total_size += 5;
  }

  // float probeChipShapeH = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapeh = this->_internal_probechipshapeh();
  ::uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    total_size += 5;
  }

  // float angle = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 5;
  }

  // float soundVelocity = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_soundvelocity = this->_internal_soundvelocity();
  ::uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    total_size += 5;
  }

  // float probeFrontDistance = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrontdistance = this->_internal_probefrontdistance();
  ::uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    total_size += 5;
  }

  // float zeroPoint = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zeropoint = this->_internal_zeropoint();
  ::uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    total_size += 5;
  }

  // int32 channel = 11;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void InstrumentParameter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentParameter*>(&to_msg);
  auto& from = static_cast<const InstrumentParameter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.InstrumentParameter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.performance_ != nullptr);
    if (_this->_impl_.performance_ == nullptr) {
      _this->_impl_.performance_ =
          ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::Performance>(arena, *from._impl_.performance_);
    } else {
      _this->_impl_.performance_->MergeFrom(*from._impl_.performance_);
    }
  }
  if (from._internal_probe() != 0) {
    _this->_impl_.probe_ = from._impl_.probe_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrequence = from._internal_probefrequence();
  ::uint32_t raw_probefrequence;
  memcpy(&raw_probefrequence, &tmp_probefrequence, sizeof(tmp_probefrequence));
  if (raw_probefrequence != 0) {
    _this->_impl_.probefrequence_ = from._impl_.probefrequence_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapel = from._internal_probechipshapel();
  ::uint32_t raw_probechipshapel;
  memcpy(&raw_probechipshapel, &tmp_probechipshapel, sizeof(tmp_probechipshapel));
  if (raw_probechipshapel != 0) {
    _this->_impl_.probechipshapel_ = from._impl_.probechipshapel_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probechipshapeh = from._internal_probechipshapeh();
  ::uint32_t raw_probechipshapeh;
  memcpy(&raw_probechipshapeh, &tmp_probechipshapeh, sizeof(tmp_probechipshapeh));
  if (raw_probechipshapeh != 0) {
    _this->_impl_.probechipshapeh_ = from._impl_.probechipshapeh_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_soundvelocity = from._internal_soundvelocity();
  ::uint32_t raw_soundvelocity;
  memcpy(&raw_soundvelocity, &tmp_soundvelocity, sizeof(tmp_soundvelocity));
  if (raw_soundvelocity != 0) {
    _this->_impl_.soundvelocity_ = from._impl_.soundvelocity_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_probefrontdistance = from._internal_probefrontdistance();
  ::uint32_t raw_probefrontdistance;
  memcpy(&raw_probefrontdistance, &tmp_probefrontdistance, sizeof(tmp_probefrontdistance));
  if (raw_probefrontdistance != 0) {
    _this->_impl_.probefrontdistance_ = from._impl_.probefrontdistance_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zeropoint = from._internal_zeropoint();
  ::uint32_t raw_zeropoint;
  memcpy(&raw_zeropoint, &tmp_zeropoint, sizeof(tmp_zeropoint));
  if (raw_zeropoint != 0) {
    _this->_impl_.zeropoint_ = from._impl_.zeropoint_;
  }
  if (from._internal_channel() != 0) {
    _this->_impl_.channel_ = from._impl_.channel_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentParameter::CopyFrom(const InstrumentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.InstrumentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentParameter::InternalSwap(InstrumentParameter* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.channel_)
      + sizeof(InstrumentParameter::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(InstrumentParameter, _impl_.performance_)>(
          reinterpret_cast<char*>(&_impl_.performance_),
          reinterpret_cast<char*>(&other->_impl_.performance_));
}

::google::protobuf::Metadata InstrumentParameter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChannelParameter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChannelParameter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_._has_bits_);
};

ChannelParameter::ChannelParameter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.ChannelParameter)
}
inline PROTOBUF_NDEBUG_INLINE ChannelParameter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::ChannelParameter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gate_{visibility, arena, from.gate_},
        ascan_(arena, from.ascan_) {}

ChannelParameter::ChannelParameter(
    ::google::protobuf::Arena* arena,
    const ChannelParameter& from)
    : ::google::protobuf::Message(arena) {
  ChannelParameter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dac_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::DAC>(
                              arena, *from._impl_.dac_)
                        : nullptr;
  _impl_.avg_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::AVG>(
                              arena, *from._impl_.avg_)
                        : nullptr;
  _impl_.performance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::Performance>(
                              arena, *from._impl_.performance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, axisbias_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, axisbias_),
           offsetof(Impl_, distancemode_) -
               offsetof(Impl_, axisbias_) +
               sizeof(Impl_::distancemode_));

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.ChannelParameter)
}
inline PROTOBUF_NDEBUG_INLINE ChannelParameter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        gate_{visibility, arena},
        ascan_(arena) {}

inline void ChannelParameter::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dac_),
           0,
           offsetof(Impl_, distancemode_) -
               offsetof(Impl_, dac_) +
               sizeof(Impl_::distancemode_));
}
ChannelParameter::~ChannelParameter() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.ChannelParameter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelParameter::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ascan_.Destroy();
  delete _impl_.dac_;
  delete _impl_.avg_;
  delete _impl_.performance_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ChannelParameter::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_._cached_size_),
              false,
          },
          &ChannelParameter::MergeImpl,
          &ChannelParameter::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 4, 0, 2> ChannelParameter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChannelParameter_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::ChannelParameter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Union.AScan.Proto.Gate gate = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.gate_)}},
    // bytes ascan = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.ascan_)}},
    // float axisBias = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.axisbias_)}},
    // float axisLen = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.axislen_)}},
    // float baseGain = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.basegain_)}},
    // float scanGain = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.scangain_)}},
    // float compensatingGain = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.compensatinggain_)}},
    // int32 suppression = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelParameter, _impl_.suppression_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.suppression_)}},
    // .Union.AScan.Proto.DistanceMode distanceMode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelParameter, _impl_.distancemode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.distancemode_)}},
    // optional .Union.AScan.Proto.DAC dac = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 1, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.dac_)}},
    // optional .Union.AScan.Proto.AVG avg = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 1, 2, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.avg_)}},
    // optional .Union.AScan.Proto.Performance performance = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 2, 3, PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.performance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Union.AScan.Proto.Gate gate = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.gate_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes ascan = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.ascan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // float axisBias = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.axisbias_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float axisLen = 4;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.axislen_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float baseGain = 5;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.basegain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float scanGain = 6;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.scangain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float compensatingGain = 7;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.compensatinggain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 suppression = 8;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.suppression_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Union.AScan.Proto.DistanceMode distanceMode = 9;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.distancemode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional .Union.AScan.Proto.DAC dac = 10;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.dac_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Union.AScan.Proto.AVG avg = 11;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.avg_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Union.AScan.Proto.Performance performance = 12;
    {PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.performance_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::Gate>()},
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::DAC>()},
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::AVG>()},
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::Performance>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ChannelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.ChannelParameter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gate_.Clear();
  _impl_.ascan_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dac_ != nullptr);
      _impl_.dac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.avg_ != nullptr);
      _impl_.avg_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.performance_ != nullptr);
      _impl_.performance_->Clear();
    }
  }
  ::memset(&_impl_.axisbias_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.distancemode_) -
      reinterpret_cast<char*>(&_impl_.axisbias_)) + sizeof(_impl_.distancemode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ChannelParameter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.ChannelParameter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Union.AScan.Proto.Gate gate = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_gate_size());
       i < n; i++) {
    const auto& repfield = this->_internal_gate().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bytes ascan = 2;
  if (!this->_internal_ascan().empty()) {
    const std::string& _s = this->_internal_ascan();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // float axisBias = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axisbias = this->_internal_axisbias();
  ::uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_axisbias(), target);
  }

  // float axisLen = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axislen = this->_internal_axislen();
  ::uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_axislen(), target);
  }

  // float baseGain = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_basegain(), target);
  }

  // float scanGain = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_scangain(), target);
  }

  // float compensatingGain = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_compensatinggain(), target);
  }

  // int32 suppression = 8;
  if (this->_internal_suppression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_suppression(), target);
  }

  // .Union.AScan.Proto.DistanceMode distanceMode = 9;
  if (this->_internal_distancemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_distancemode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Union.AScan.Proto.DAC dac = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.dac_, _impl_.dac_->GetCachedSize(), target, stream);
  }

  // optional .Union.AScan.Proto.AVG avg = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *_impl_.avg_, _impl_.avg_->GetCachedSize(), target, stream);
  }

  // optional .Union.AScan.Proto.Performance performance = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *_impl_.performance_, _impl_.performance_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.ChannelParameter)
  return target;
}

::size_t ChannelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.ChannelParameter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .Union.AScan.Proto.Gate gate = 1;
  total_size += 1UL * this->_internal_gate_size();
  for (const auto& msg : this->_internal_gate()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes ascan = 2;
  if (!this->_internal_ascan().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_ascan());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Union.AScan.Proto.DAC dac = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dac_);
    }

    // optional .Union.AScan.Proto.AVG avg = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.avg_);
    }

    // optional .Union.AScan.Proto.Performance performance = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.performance_);
    }

  }
  // float axisBias = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axisbias = this->_internal_axisbias();
  ::uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    total_size += 5;
  }

  // float axisLen = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axislen = this->_internal_axislen();
  ::uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    total_size += 5;
  }

  // float baseGain = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = this->_internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    total_size += 5;
  }

  // float scanGain = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = this->_internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    total_size += 5;
  }

  // float compensatingGain = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = this->_internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    total_size += 5;
  }

  // int32 suppression = 8;
  if (this->_internal_suppression() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_suppression());
  }

  // .Union.AScan.Proto.DistanceMode distanceMode = 9;
  if (this->_internal_distancemode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_distancemode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ChannelParameter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChannelParameter*>(&to_msg);
  auto& from = static_cast<const ChannelParameter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.ChannelParameter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gate()->MergeFrom(
      from._internal_gate());
  if (!from._internal_ascan().empty()) {
    _this->_internal_set_ascan(from._internal_ascan());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.dac_ != nullptr);
      if (_this->_impl_.dac_ == nullptr) {
        _this->_impl_.dac_ =
            ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::DAC>(arena, *from._impl_.dac_);
      } else {
        _this->_impl_.dac_->MergeFrom(*from._impl_.dac_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.avg_ != nullptr);
      if (_this->_impl_.avg_ == nullptr) {
        _this->_impl_.avg_ =
            ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::AVG>(arena, *from._impl_.avg_);
      } else {
        _this->_impl_.avg_->MergeFrom(*from._impl_.avg_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.performance_ != nullptr);
      if (_this->_impl_.performance_ == nullptr) {
        _this->_impl_.performance_ =
            ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::Performance>(arena, *from._impl_.performance_);
      } else {
        _this->_impl_.performance_->MergeFrom(*from._impl_.performance_);
      }
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axisbias = from._internal_axisbias();
  ::uint32_t raw_axisbias;
  memcpy(&raw_axisbias, &tmp_axisbias, sizeof(tmp_axisbias));
  if (raw_axisbias != 0) {
    _this->_impl_.axisbias_ = from._impl_.axisbias_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_axislen = from._internal_axislen();
  ::uint32_t raw_axislen;
  memcpy(&raw_axislen, &tmp_axislen, sizeof(tmp_axislen));
  if (raw_axislen != 0) {
    _this->_impl_.axislen_ = from._impl_.axislen_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_basegain = from._internal_basegain();
  ::uint32_t raw_basegain;
  memcpy(&raw_basegain, &tmp_basegain, sizeof(tmp_basegain));
  if (raw_basegain != 0) {
    _this->_impl_.basegain_ = from._impl_.basegain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scangain = from._internal_scangain();
  ::uint32_t raw_scangain;
  memcpy(&raw_scangain, &tmp_scangain, sizeof(tmp_scangain));
  if (raw_scangain != 0) {
    _this->_impl_.scangain_ = from._impl_.scangain_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_compensatinggain = from._internal_compensatinggain();
  ::uint32_t raw_compensatinggain;
  memcpy(&raw_compensatinggain, &tmp_compensatinggain, sizeof(tmp_compensatinggain));
  if (raw_compensatinggain != 0) {
    _this->_impl_.compensatinggain_ = from._impl_.compensatinggain_;
  }
  if (from._internal_suppression() != 0) {
    _this->_impl_.suppression_ = from._impl_.suppression_;
  }
  if (from._internal_distancemode() != 0) {
    _this->_impl_.distancemode_ = from._impl_.distancemode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelParameter::CopyFrom(const ChannelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.ChannelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChannelParameter::InternalSwap(ChannelParameter* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gate_.InternalSwap(&other->_impl_.gate_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ascan_, &other->_impl_.ascan_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.distancemode_)
      + sizeof(ChannelParameter::_impl_.distancemode_)
      - PROTOBUF_FIELD_OFFSET(ChannelParameter, _impl_.dac_)>(
          reinterpret_cast<char*>(&_impl_.dac_),
          reinterpret_cast<char*>(&other->_impl_.dac_));
}

::google::protobuf::Metadata ChannelParameter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AScanPayload::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AScanPayload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_._has_bits_);
};

AScanPayload::AScanPayload(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AScanPayload)
}
inline PROTOBUF_NDEBUG_INLINE AScanPayload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::AScanPayload& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cameradata_(arena, from.cameradata_) {}

AScanPayload::AScanPayload(
    ::google::protobuf::Arena* arena,
    const AScanPayload& from)
    : ::google::protobuf::Message(arena) {
  AScanPayload* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrumentparameter_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::InstrumentParameter>(
                              arena, *from._impl_.instrumentparameter_)
                        : nullptr;
  _impl_.channelparameter_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::ChannelParameter>(
                              arena, *from._impl_.channelparameter_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AScanPayload)
}
inline PROTOBUF_NDEBUG_INLINE AScanPayload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        cameradata_(arena) {}

inline void AScanPayload::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrumentparameter_),
           0,
           offsetof(Impl_, channelparameter_) -
               offsetof(Impl_, instrumentparameter_) +
               sizeof(Impl_::channelparameter_));
}
AScanPayload::~AScanPayload() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AScanPayload)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AScanPayload::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.cameradata_.Destroy();
  delete _impl_.instrumentparameter_;
  delete _impl_.channelparameter_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AScanPayload::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_._cached_size_),
              false,
          },
          &AScanPayload::MergeImpl,
          &AScanPayload::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> AScanPayload::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AScanPayload_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::AScanPayload>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.instrumentparameter_)}},
    // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.channelparameter_)}},
    // optional bytes cameraData = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.cameradata_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
    {PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.instrumentparameter_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
    {PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.channelparameter_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes cameraData = 3;
    {PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.cameradata_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::InstrumentParameter>()},
    {::_pbi::TcParser::GetTable<::Union::AScan::Proto::ChannelParameter>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AScanPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AScanPayload)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cameradata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.instrumentparameter_ != nullptr);
      _impl_.instrumentparameter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.channelparameter_ != nullptr);
      _impl_.channelparameter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AScanPayload::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AScanPayload)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.instrumentparameter_, _impl_.instrumentparameter_->GetCachedSize(), target, stream);
  }

  // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.channelparameter_, _impl_.channelparameter_->GetCachedSize(), target, stream);
  }

  // optional bytes cameraData = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cameradata();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AScanPayload)
  return target;
}

::size_t AScanPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AScanPayload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes cameraData = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_cameradata());
    }

    // .Union.AScan.Proto.InstrumentParameter instrumentParameter = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.instrumentparameter_);
    }

    // .Union.AScan.Proto.ChannelParameter channelParameter = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.channelparameter_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AScanPayload::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AScanPayload*>(&to_msg);
  auto& from = static_cast<const AScanPayload&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AScanPayload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cameradata(from._internal_cameradata());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.instrumentparameter_ != nullptr);
      if (_this->_impl_.instrumentparameter_ == nullptr) {
        _this->_impl_.instrumentparameter_ =
            ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::InstrumentParameter>(arena, *from._impl_.instrumentparameter_);
      } else {
        _this->_impl_.instrumentparameter_->MergeFrom(*from._impl_.instrumentparameter_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.channelparameter_ != nullptr);
      if (_this->_impl_.channelparameter_ == nullptr) {
        _this->_impl_.channelparameter_ =
            ::google::protobuf::Message::CopyConstruct<::Union::AScan::Proto::ChannelParameter>(arena, *from._impl_.channelparameter_);
      } else {
        _this->_impl_.channelparameter_->MergeFrom(*from._impl_.channelparameter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AScanPayload::CopyFrom(const AScanPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AScanPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AScanPayload::InternalSwap(AScanPayload* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameradata_, &other->_impl_.cameradata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.channelparameter_)
      + sizeof(AScanPayload::_impl_.channelparameter_)
      - PROTOBUF_FIELD_OFFSET(AScanPayload, _impl_.instrumentparameter_)>(
          reinterpret_cast<char*>(&_impl_.instrumentparameter_),
          reinterpret_cast<char*>(&other->_impl_.instrumentparameter_));
}

::google::protobuf::Metadata AScanPayload::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AScanHead::_Internal {
 public:
};

AScanHead::AScanHead(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Union.AScan.Proto.AScanHead)
}
inline PROTOBUF_NDEBUG_INLINE AScanHead::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Union::AScan::Proto::AScanHead& from_msg)
      : instrumentname_(arena, from.instrumentname_),
        time_(arena, from.time_),
        _cached_size_{0} {}

AScanHead::AScanHead(
    ::google::protobuf::Arena* arena,
    const AScanHead& from)
    : ::google::protobuf::Message(arena) {
  AScanHead* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:Union.AScan.Proto.AScanHead)
}
inline PROTOBUF_NDEBUG_INLINE AScanHead::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instrumentname_(arena),
        time_(arena),
        _cached_size_{0} {}

inline void AScanHead::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AScanHead::~AScanHead() {
  // @@protoc_insertion_point(destructor:Union.AScan.Proto.AScanHead)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AScanHead::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.instrumentname_.Destroy();
  _impl_.time_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AScanHead::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AScanHead, _impl_._cached_size_),
              false,
          },
          &AScanHead::MergeImpl,
          &AScanHead::kDescriptorMethods,
          &descriptor_table_AScan_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 54, 2> AScanHead::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AScanHead_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Union::AScan::Proto::AScanHead>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string time = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AScanHead, _impl_.time_)}},
    // string instrumentName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AScanHead, _impl_.instrumentname_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrumentName = 1;
    {PROTOBUF_FIELD_OFFSET(AScanHead, _impl_.instrumentname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string time = 2;
    {PROTOBUF_FIELD_OFFSET(AScanHead, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\16\4\0\0\0\0\0"
    "Union.AScan.Proto.AScanHead"
    "instrumentName"
    "time"
  }},
};

PROTOBUF_NOINLINE void AScanHead::Clear() {
// @@protoc_insertion_point(message_clear_start:Union.AScan.Proto.AScanHead)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrumentname_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AScanHead::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Union.AScan.Proto.AScanHead)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string instrumentName = 1;
  if (!this->_internal_instrumentname().empty()) {
    const std::string& _s = this->_internal_instrumentname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Union.AScan.Proto.AScanHead.instrumentName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    const std::string& _s = this->_internal_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Union.AScan.Proto.AScanHead.time");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Union.AScan.Proto.AScanHead)
  return target;
}

::size_t AScanHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Union.AScan.Proto.AScanHead)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string instrumentName = 1;
  if (!this->_internal_instrumentname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_instrumentname());
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AScanHead::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AScanHead*>(&to_msg);
  auto& from = static_cast<const AScanHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Union.AScan.Proto.AScanHead)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrumentname().empty()) {
    _this->_internal_set_instrumentname(from._internal_instrumentname());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AScanHead::CopyFrom(const AScanHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Union.AScan.Proto.AScanHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AScanHead::InternalSwap(AScanHead* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrumentname_, &other->_impl_.instrumentname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
}

::google::protobuf::Metadata AScanHead::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace AScan
}  // namespace Union
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_AScan_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
